// controllers/ConfirmRegistration.js
const { supabase } = require('../utils/supabaseClient');
const line = require('@line/bot-sdk');

// LINE Bot configuration
const config = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET
};

const client = new line.Client(config);

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Ref.Code ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Serial Key ‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡πÑ‡∏•‡∏ô‡πå
 * ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "Verify Code" ‡πÉ‡∏ô Userform3
 */
const verifyRefCode = async (req, res) => {
  try {
    const { refCode } = req.body;
    
    if (!refCode) {
      return res.status(400).json({ 
        success: false, 
        message: 'Missing Ref.Code' 
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Ref.Code ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const { data, error } = await supabase
      .from('auth_sessions')
      .select('line_user_id, serial_key')
      .eq('ref_code', refCode)
      .single();
      
    if (error || !data) {
      console.error('‚ùå Error verifying Ref.Code:', error || 'Not found');
      return res.status(404).json({ 
        success: false, 
        message: 'Invalid Ref.Code' 
      });
    }
    
    // ‡∏™‡πà‡∏á Serial Key ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏•‡∏ô‡πå
    try {
      await client.pushMessage(data.line_user_id, {
        type: 'text',
        text: `‚úÖ ‡∏£‡∏´‡∏±‡∏™ Serial Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: ${data.serial_key}\n‡πÇ‡∏õ‡∏£‡∏î‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á Excel ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ`
      });
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      await supabase
        .from('auth_sessions')
        .update({ 
          status: 'REFCODE_VERIFIED',
          last_action_at: new Date().toISOString()
        })
        .eq('ref_code', refCode);
        
      // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ VBA
      return res.status(200).json({
        success: true,
        message: 'Serial Key sent successfully',
        countdown: "Serial Key ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô: 5:00 ‡∏ô‡∏≤‡∏ó‡∏µ",
        stage3: "Serial Key ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ä‡∏ó‡πÑ‡∏•‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡∏°‡∏≤‡∏Å‡∏£‡∏≠‡∏Å"
      });
      
    } catch (lineError) {
      console.error('‚ùå Error sending Serial Key to LINE:', lineError);
      return res.status(500).json({ 
        success: false, 
        message: 'Failed to send Serial Key' 
      });
    }
    
  } catch (error) {
    console.error('‚ùå Error in verifyRefCode:', error);
    return res.status(500).json({ 
      success: false, 
      message: 'Server error' 
    });
  }
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Serial Key ‡πÅ‡∏•‡∏∞ Ref.Code
 * ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "Confirm" ‡πÉ‡∏ô Userform3
 */
const verifySerialKey = async (req, res) => {
  try {
    const { refCode, serialKey } = req.body;
    
    if (!refCode || !serialKey) {
      return res.status(400).json({ 
        success: false, 
        message: 'Missing Ref.Code or Serial Key' 
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Serial Key ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Ref.Code ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const { data, error } = await supabase
      .from('auth_sessions')
      .select('line_user_id, status')
      .eq('ref_code', refCode)
      .eq('serial_key', serialKey)
      .single();
      
    if (error || !data) {
      console.error('‚ùå Error verifying Serial Key:', error || 'Not found');
      return res.status(404).json({ 
        success: false, 
        message: 'Invalid Serial Key or Ref.Code' 
      });
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    await supabase
      .from('auth_sessions')
      .update({ 
        status: 'SERIALKEY_VERIFIED',
        verified_at: new Date().toISOString()
      })
      .eq('ref_code', refCode)
      .eq('serial_key', serialKey);
    
    // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ VBA
    return res.status(200).json({ 
      success: true, 
      message: 'Serial Key verified successfully'
    });
    
  } catch (error) {
    console.error('‚ùå Error in verifySerialKey:', error);
    return res.status(500).json({ 
      success: false, 
      message: 'Server error' 
    });
  }
};

/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * ‡πÄ‡∏°‡∏∑‡πà‡∏≠ VBA ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ConfirmRegistration()
 */
const completeRegistration = async (req, res) => {
  try {
    const { 
      refCode, 
      serialKey, 
      machineId, 
      pdpaStatus, // ACCEPTED ‡∏´‡∏£‡∏∑‡∏≠ NOT_ACCEPTED
      userData     // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏° REGISTER
    } = req.body;
    
    if (!refCode || !serialKey || !machineId) {
      return res.status(400).json({ 
        success: false, 
        message: 'Missing required fields' 
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const { data, error } = await supabase
      .from('auth_sessions')
      .select('line_user_id, status')
      .eq('ref_code', refCode)
      .eq('serial_key', serialKey)
      .single();
      
    if (error || !data) {
      console.error('‚ùå Error fetching session data:', error || 'Not found');
      return res.status(404).json({ 
        success: false, 
        message: 'Invalid Ref.Code or Serial Key' 
      });
    }
    
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ PDPA
    const usageDays = pdpaStatus === 'ACCEPTED' ? 7 : 1;
    const expiryDate = new Date();
    expiryDate.setDate(expiryDate.getDate() + usageDays);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const { error: updateError } = await supabase
      .from('auth_sessions')
      .update({
        machine_id: machineId,
        pdpa_status: pdpaStatus,
        user_data: userData, // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏° REGISTER
        status: 'COMPLETED',
        completed_at: new Date().toISOString(),
        expires_at: expiryDate.toISOString()
      })
      .eq('ref_code', refCode)
      .eq('serial_key', serialKey);
      
    if (updateError) {
      console.error('‚ùå Error updating user data:', updateError);
      return res.status(500).json({ 
        success: false, 
        message: 'Failed to save registration data' 
      });
    }
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
    await supabase
      .from('activity_logs')
      .insert({
        ref_code: refCode,
        line_user_id: data.line_user_id,
        action: 'Registration completed',
        machine_id: machineId,
        pdpa_status: pdpaStatus,
        timestamp: new Date().toISOString()
      });
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏≤‡∏á‡πÑ‡∏•‡∏ô‡πå
    try {
      await client.pushMessage(data.line_user_id, {
        type: 'text',
        text: `üéâ ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ${usageDays} ‡∏ß‡∏±‡∏ô (‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${expiryDate.toLocaleDateString('th-TH')})`
      });
    } catch (lineError) {
      console.error('‚ùå Error sending completion message:', lineError);
      // ‡πÑ‡∏°‡πà return error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ñ‡∏∂‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πá‡∏¢‡∏±‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    }
    
    // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ VBA
    return res.status(200).json({ 
      success: true, 
      message: 'Registration completed successfully',
      expiryDate: expiryDate.toISOString(),
      usageDays
    });
    
  } catch (error) {
    console.error('‚ùå Error in completeRegistration:', error);
    return res.status(500).json({ 
      success: false, 
      message: 'Server error' 
    });
  }
};

/**
 * ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà Serial Key ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 */
const resendSerialKey = async (req, res) => {
  try {
    const { refCode } = req.body;
    
    if (!refCode) {
      return res.status(400).json({ 
        success: false, 
        message: 'Missing Ref.Code' 
      });
    }
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const { data, error } = await supabase
      .from('auth_sessions')
      .select('line_user_id, serial_key')
      .eq('ref_code', refCode)
      .single();
      
    if (error || !data) {
      console.error('‚ùå Error finding user data:', error || 'Not found');
      return res.status(404).json({ 
        success: false, 
        message: 'Invalid Ref.Code' 
      });
    }
    
    // ‡∏™‡πà‡∏á Serial Key ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏•‡∏ô‡πå‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    try {
      await client.pushMessage(data.line_user_id, {
        type: 'text',
        text: `üîÑ ‡∏£‡∏´‡∏±‡∏™ Serial Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: ${data.serial_key}\n‡πÇ‡∏õ‡∏£‡∏î‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á Excel ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ`
      });
      
      return res.status(200).json({ 
        success: true, 
        message: 'Serial Key resent successfully' 
      });
      
    } catch (lineError) {
      console.error('‚ùå Error resending Serial Key:', lineError);
      return res.status(500).json({ 
        success: false, 
        message: 'Failed to resend Serial Key' 
      });
    }
    
  } catch (error) {
    console.error('‚ùå Error in resendSerialKey:', error);
    return res.status(500).json({ 
      success: false, 
      message: 'Server error' 
    });
  }
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
 */
const checkRegistrationStatus = async (req, res) => {
  try {
    const { refCode } = req.params;
    
    if (!refCode) {
      return res.status(400).json({ 
        success: false, 
        message: 'Missing Ref.Code' 
      });
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    const { data, error } = await supabase
      .from('auth_sessions')
      .select('status, pdpa_status, expires_at')
      .eq('ref_code', refCode)
      .single();
      
    if (error || !data) {
      console.error('‚ùå Error checking status:', error || 'Not found');
      return res.status(404).json({ 
        success: false, 
        message: 'Ref.Code not found' 
      });
    }
    
    return res.status(200).json({ 
      success: true, 
      status: data.status,
      pdpaStatus: data.pdpa_status,
      expiresAt: data.expires_at
    });
    
  } catch (error) {
    console.error('‚ùå Error in checkRegistrationStatus:', error);
    return res.status(500).json({ 
      success: false, 
      message: 'Server error' 
    });
  }
};

module.exports = {
  verifyRefCode,
  verifySerialKey,
  completeRegistration,
  resendSerialKey,
  checkRegistrationStatus
};
