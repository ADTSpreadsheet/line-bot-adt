// ‚úÖ FILE: controllers/ConfirmRegistration.js

const { supabase } = require('../utils/supabaseClient');
const line = require('@line/bot-sdk');
const fetch = require('node-fetch'); // ‚úÖ ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÉ‡∏™‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ import

const config = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET
};

const client = new line.Client(config);

const completeRegistration = async (req, res) => {
  try {
    const {
      ref_code,
      serial_key,
      machine_id,
      pdpa_status,
      gender,
      first_name,
      last_name,
      nickname,
      age,
      occupation,
      national_id,
      house_number,
      district,
      province,
      postal_code,
      phone_number,
      email,
      facebook_url,
      line_id
    } = req.body;

    if (!ref_code || !serial_key || !machine_id) {
      return res.status(400).json({ success: false, message: 'Missing required fields' });
    }

    const { data, error } = await supabase
      .from('auth_sessions')
      .select('line_user_id')
      .eq('ref_code', ref_code)
      .eq('serial_key', serial_key)
      .single();

    if (error || !data || !data.line_user_id) {
      await supabase.from('activity_logs').insert({
        ref_code,
        line_user_id: null,
        line_id,
        action: `Ref.Code ${ref_code} ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
        machine_id,
        pdpa_status,
        timestamp: new Date().toISOString()
      });

      try {
        if (line_id) {
          await client.pushMessage(line_id, {
            type: 'text',
            text: `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Admin ‡∏Ç‡∏≠‡∏á ADT`
          });
        }
      } catch (lineError) {
        console.error('‚ùå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏Å‡∏£‡∏ì‡∏µ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß):', lineError);
      }

      return res.status(404).json({ success: false, message: 'Invalid Ref.Code or Serial Key' });
    }

    const line_user_id = data.line_user_id;
    const usageDays = pdpa_status === 'PDPA_ACCEPTED' ? 7 : 1;
    const expiryDate = new Date();
    expiryDate.setDate(expiryDate.getDate() + usageDays);

    const { error: updateError } = await supabase
      .from('auth_sessions')
      .update({
        machine_id,
        pdpa_status,
        gender,
        first_name,
        last_name,
        nickname,
        age,
        occupation,
        national_id,
        house_number,
        district,
        province,
        postal_code,
        phone_number,
        email,
        facebook_url,
        line_id,
        status: 'COMPLETED',
        completed_at: new Date().toISOString(),
        expires_at: expiryDate.toISOString()
      })
      .eq('ref_code', ref_code)
      .eq('serial_key', serial_key);

    if (updateError) {
      await supabase.from('activity_logs').insert({
        ref_code,
        line_user_id,
        line_id,
        action: `Ref.Code ${ref_code} ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
        machine_id,
        pdpa_status,
        timestamp: new Date().toISOString()
      });

      console.error(`‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: Ref.Code ${ref_code}`);
      return res.status(500).json({ success: false, message: 'Failed to save registration data' });
    }

    // ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ API2
    const user_data = {
      gender,
      first_name,
      last_name,
      nickname,
      age,
      occupation,
      national_id,
      house_number,
      district,
      province,
      postal_code,
      phone_number,
      email,
      facebook_url,
      line_id
    };

    try {
      await fetch('https://line-bot-adt2.onrender.com/router/register-machine', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ref_code,
          machine_id,
          pdpa_status,
          user_data,
          expires_at: expiryDate.toISOString()
        })
      });

      console.log(`üì¶ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ API2 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: Ref.Code ${ref_code}`);
    } catch (err) {
      console.error(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ API2 ‡πÑ‡∏î‡πâ: Ref.Code ${ref_code}`, err);
    }

    const logMessage = pdpa_status === 'PDPA_ACCEPTED'
      ? `Ref.Code ${ref_code} ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ä‡πâ ADTSpreadsheet ‡πÑ‡∏î‡πâ‡∏ü‡∏£‡∏µ 7 ‡∏ß‡∏±‡∏ô ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
      : `Ref.Code ${ref_code} ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ä‡πâ ADTSpreadsheet ‡πÑ‡∏î‡πâ‡∏ü‡∏£‡∏µ 1 ‡∏ß‡∏±‡∏ô ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`;

    await supabase.from('activity_logs').insert({
      ref_code,
      line_user_id,
      line_id,
      action: logMessage,
      machine_id,
      pdpa_status,
      timestamp: new Date().toISOString()
    });

    console.log(`‚úÖ Ref.Code ${ref_code} ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);

    try {
      await client.pushMessage(line_user_id, {
        type: 'text',
        text: `üéâ ‡∏Ñ‡∏∏‡∏ì‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ADTSpreadsheet ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ü‡∏£‡∏µ ${usageDays} ‡∏ß‡∏±‡∏ô\n‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${expiryDate.toLocaleDateString('th-TH')} ‡∏Ñ‡∏£‡∏±‡∏ö`
      });
    } catch (err) {
      console.error('‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à):', err);
    }

    return res.status(200).json({
      success: true,
      message: 'Registration completed successfully',
      expiryDate: expiryDate.toISOString(),
      usageDays
    });
  } catch (err) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô completeRegistration:', err);
    return res.status(500).json({ success: false, message: 'Server error' });
  }
};

module.exports = {
  completeRegistration
};
