const { supabase } = require('../utils/supabaseClient');
const { sendLineMessage } = require('../routes/events/eventLine');
const logger = require('../utils/logger').createModuleLogger('verifyRefCodeAndSerial');

//---------------------------------------------------------------
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô verifyLicense1 ‚Äì ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å license_no, national_id, phone_number
//---------------------------------------------------------------
const verifyLicense1 = async (req, res) => {
  try {
    const { license_no, national_id, phone_number } = req.body;

    console.log("üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤:", { license_no, national_id, phone_number });

    if (!license_no || !phone_number) {
      console.log("‚ö†Ô∏è [0] ‡πÑ‡∏°‡πà‡∏°‡∏µ license_no ‡∏´‡∏£‡∏∑‡∏≠ phone_number");

      const { data: partialMatch, error: partialError } = await supabase
        .from('license_holders')
        .select('license_no, first_name, last_name')
        .eq('license_no', license_no)
        .eq('phone_number', phone_number)
        .is('national_id', null)
        .single();

      if (partialMatch) {
        console.log("üü° [1.3] ‡∏û‡∏ö License + Phone ‡∏ï‡∏£‡∏á ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", license_no);

        return res.status(206).json({
          license_no: partialMatch.license_no,
          full_name: `${partialMatch.first_name} ${partialMatch.last_name}`,
          message: '‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô'
        });
      }
    }

    const { data: partialMatch2 } = await supabase
      .from('license_holders')
      .select('license_no, first_name, last_name')
      .eq('license_no', license_no)
      .eq('phone_number', phone_number)
      .is('national_id', null)
      .single();

    if (partialMatch2) {
      console.log("üü° [1.3] ‡∏û‡∏ö License + Phone ‡∏ï‡∏£‡∏á ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", license_no);

      return res.status(206).json({
        license_no: partialMatch2.license_no,
        full_name: `${partialMatch2.first_name} ${partialMatch2.last_name}`,
        message: '‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô'
      });
    }

    const { data: licenseCheck, error: licenseError } = await supabase
      .from('license_holders')
      .select('license_no, status, verify_count')
      .eq('license_no', license_no)
      .single();

    if (licenseError || !licenseCheck) {
      console.log("‚ùå [1.1] ‡πÑ‡∏°‡πà‡∏û‡∏ö license_no:", license_no);
      return res.status(404).json({
        message: '‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏•‡∏¥‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ ADT-Admin'
      });
    }

    if (licenseCheck.status !== 'Pending') {
      console.log("üîÅ [1.2] License ‡πÄ‡∏Ñ‡∏¢‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß:", license_no);
      return res.status(409).json({
        message: '‡∏£‡∏´‡∏±‡∏™‡∏•‡∏¥‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'
      });
    }

    const { data, error } = await supabase
      .from('license_holders')
      .select('license_no, first_name, last_name, verify_count')
      .eq('license_no', license_no)
      .eq('national_id', national_id)
      .eq('phone_number', phone_number)
      .single();

    if (data) {
      console.log("‚úÖ [2.1] ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", data.license_no);
      return res.status(200).json({
        license_no: data.license_no,
        full_name: `${data.first_name} ${data.last_name}`,
        message: 'Your copyright has been successfully verified.'
      });
    }

    const verifyCount = licenseCheck.verify_count || 0;

    if (verifyCount < 3) {
      const newCount = verifyCount + 1;

      await supabase
        .from('license_holders')
        .update({ verify_count: newCount })
        .eq('license_no', license_no);

      console.log(`‚ö†Ô∏è [2.2] ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${newCount}) ‚Üí ${license_no}`);
      return res.status(401).json({
        message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        verify_count: newCount,
        attempts_remaining: `‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å ${4 - newCount} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`
      });
    }

    await supabase
      .from('license_holders')
      .update({ verify_count: 4 })
      .eq('license_no', license_no);

    console.log("üö´ [3] ‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å - ‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á:", license_no);
    return res.status(403).json({
      message: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏¥‡∏î‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö'
    });

  } catch (err) {
    console.error('‚ùå [ERROR] VERIFY LICENSE1', err);
    return res.status(500).json({
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
    });
  }
};

//---------------------------------------------------------------
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô verifyRefCodeAndSerial ‚Äì ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Ref.Code + Serial Key + ‡∏™‡πà‡∏á serial key ‡πÉ‡∏ô Line
//---------------------------------------------------------------

const verifyRefCodeAndSerial = async (req, res) => {
  logger.info('üì© [START] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Ref.Code');

  try {
    const { ref_code } = req.body;
    logger.info('üì• [REQUEST BODY]', { ref_code });

    if (!ref_code) {
      logger.warn('‚ö†Ô∏è [MISSING DATA] ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ ref_code');
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Ref.Code ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á auth_sessions ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ref_code
    logger.info('üîç [QUERY] ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Ref.Code ‡πÉ‡∏ô Supabase');
    const { data, error } = await supabase
      .from('auth_sessions')
      .select('serial_key, line_user_id')
      .eq('ref_code', ref_code)
      .eq('status', 'ACTIVE')
      .single();

    if (error) {
      logger.error('‚ùå [SUPABASE ERROR]', error.message || error);
    }

    if (!data) {
      logger.warn('üõë [NOT FOUND] ‡πÑ‡∏°‡πà‡∏û‡∏ö Ref.Code ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', { ref_code });
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Ref.Code ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }

    const { serial_key: matchedSerialKey, line_user_id } = data;
    logger.info('‚úÖ [DATA FOUND]', { matchedSerialKey, line_user_id });

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô LINE Bot
    try {
      logger.info('üì§ [LINE BOT] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á Serial Key ‡∏ú‡πà‡∏≤‡∏ô LINE', {
        ref_code,
        line_user_id,
        serial_key: matchedSerialKey,
      });

      await sendLineMessage(line_user_id, matchedSerialKey, ref_code);

      logger.info('‚úÖ [LINE SENT] ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', { ref_code, line_user_id });
      return res.status(200).json({ message: '‡∏™‡πà‡∏á Serial Key ‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' });

    } catch (lineError) {
      logger.error('‚ùå [LINE FAILED] ‡∏™‡πà‡∏á LINE ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', {
        ref_code,
        line_user_id,
        serial_key: matchedSerialKey,
        error: lineError.message,
      });
      return res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á Serial Key ‡∏ó‡∏≤‡∏á LINE ‡πÑ‡∏î‡πâ' });
    }

  } catch (err) {
    logger.error('üî• [UNEXPECTED ERROR] ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô', err);
    return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' });
  }
};

//---------------------------------------------------------------
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô verifyLicense2 ‚Äì ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Ref.Code + Serial Key + License No
//---------------------------------------------------------------
const verifyLicense2 = async (req, res) => {
  try {
    const { license_no, ref_code, serial_key } = req.body;

    if (!license_no || !ref_code || !serial_key) {
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ license_no, ref_code ‡πÅ‡∏•‡∏∞ serial_key ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }

    const { data: sessionMatch, error: sessionError } = await supabase
      .from('auth_sessions')
      .select('*')
      .eq('ref_code', ref_code)
      .eq('serial_key', serial_key)
      .single();

    if (sessionError || !sessionMatch) {
      return res.status(400).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Ref.Code ‡∏´‡∏£‡∏∑‡∏≠ Serial Key ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }

    const { data: licenseRow, error: licenseError } = await supabase
      .from('license_holders')
      .select('*')
      .eq('license_no', license_no)
      .single();

    if (licenseError || !licenseRow) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏•‡∏¥‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }

    const { error: updateError } = await supabase
      .from('license_holders')
      .update({
        ref_code: ref_code,
        serial_key: serial_key,
        is_verify: true
      })
      .eq('license_no', license_no);

    if (updateError) {
      console.error('‚ùå [VERIFY LICENSE2 - UPDATE ERROR]', updateError);
      return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }

    const { data: licenseHolderInfo, error: infoError } = await supabase
      .from('license_holders')
      .select('first_name, last_name, occupation, address, province, postal_code')
      .eq('license_no', license_no)
      .single();

    if (infoError || !licenseHolderInfo) {
      console.error('‚ùå [VERIFY LICENSE2 - FETCH INFO ERROR]', infoError);
      return res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ' });
    }

    console.log(`‚úÖ [VERIFY LICENSE2 SUCCESS] License: ${license_no} -> RefCode: ${ref_code}`);
    return res.status(200).json({
      message: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß',
      license_no: license_no,
      ref_code: ref_code,
      first_name: licenseHolderInfo.first_name,
      last_name: licenseHolderInfo.last_name,
      occupation: licenseHolderInfo.occupation,
      address: licenseHolderInfo.address,
      province: licenseHolderInfo.province,
      postal_code: licenseHolderInfo.postal_code
    });

  } catch (err) {
    console.error('‚ùå [VERIFY LICENSE2 - SYSTEM ERROR]', err);
    return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà' });
  }
};



module.exports = {
  verifyLicense1,
  verifyLicense2,
  verifyRefCodeAndSerial
};
