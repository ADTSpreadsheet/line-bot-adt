const { supabase } = require('../utils/supabaseClient');
const { sendLineMessage } = require('../utils/lineBot');

/**
 * ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á OTP ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @returns {Object} HTTP response
 */
const confirmOtp = async (req, res) => {
  try {
    const { ref_code, otp } = req.body;
    console.log(`üîç [CONFIRM OTP] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP ‚Üí Ref.Code: ${ref_code}, OTP: ${otp}`);

    // STEP 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤
    const { data, error } = await supabase
      .from('otp_sessions')
      .select('*')
      .eq('ref_code', ref_code)
      .eq('otp_code', otp)
      .eq('status', 'ACTIVE')
      .maybeSingle();

    if (error || !data) {
      console.warn(`‚ùå [CONFIRM OTP] OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚Üí Ref.Code: ${ref_code}`);
      return res.status(400).json({ 
        status: 'error',
        message: 'OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß' 
      });
    }

    console.log(`‚úÖ [CONFIRM OTP] ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí Ref.Code: ${ref_code}`);
    return res.status(200).json({ 
      status: 'success',
      message: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö üéâ' 
    });

  } catch (err) {
    console.error('üî• [CONFIRM OTP ERROR] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', err);
    return res.status(500).json({ 
      status: 'error',
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP' 
    });
  }
};

/**
 * ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå OTP - ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ OTP ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @returns {Object} HTTP response
 */
const clearOtp = async (req, res) => {
  try {
    const { ref_code } = req.body;
    console.log(`üßπ [CLEAR OTP] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á OTP ‚Üí Ref.Code: ${ref_code}`);

    // ‡∏•‡πâ‡∏≤‡∏á OTP ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å otp_sessions
    const { error: clearError } = await supabase
      .from('otp_sessions')
      .update({ 
        otp_code: null,
        updated_at: new Date().toISOString()
      })
      .eq('ref_code', ref_code);

    if (clearError) {
      console.error(`‚ùå [CLEAR OTP] ‡∏•‡πâ‡∏≤‡∏á OTP ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, clearError);
      return res.status(500).json({ 
        status: 'error',
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ OTP ‡πÑ‡∏î‡πâ' 
      });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô auth_sessions (optional)
    const { error: updateError } = await supabase
      .from('auth_sessions')
      .update({ 
        verify_status: 'Verified',
        updated_at: new Date().toISOString()
      })
      .eq('ref_code', ref_code);

    if (updateError) {
      console.warn(`‚ö†Ô∏è [CLEAR OTP] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡∏•‡πâ‡∏≤‡∏á OTP ‡πÅ‡∏•‡πâ‡∏ß:`, updateError);
      // ‡πÑ‡∏°‡πà return error ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
    }

    console.log(`‚úÖ [CLEAR OTP] ‡∏•‡πâ‡∏≤‡∏á OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí Ref.Code: ${ref_code}`);
    return res.status(200).json({ 
      status: 'success',
      message: '‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' 
    });

  } catch (err) {
    console.error('üî• [CLEAR OTP ERROR] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', err);
    return res.status(500).json({ 
      status: 'error',
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ OTP' 
    });
  }
};

// ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
module.exports = {
  confirmOtp,
  clearOtp
};
