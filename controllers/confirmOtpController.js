const { supabase } = require('../utils/supabaseClient');
const { sendLineMessage } = require('../utils/lineBot');

/**
 * ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP
 */
const confirmOtp = async (req, res) => {
  try {
    const { ref_code, otp } = req.body;

    const { data, error } = await supabase
      .from('auth_sessions')
      .select('*')
      .eq('ref_code', ref_code)
      .eq('otp_code', otp)
      .maybeSingle();
    console.log(`üì© [CONFIRM OTP] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP`);
    
    if (error) {
      console.error(`‚ùå [CONFIRM OTP] Supabase Error: ${error.message}`);
      return res.status(500).json({ 
        status: 'error',
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP' 
      });
    }

    if (!data) {
      console.warn(`‚ö†Ô∏è [CONFIRM OTP] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ref.Code ‡∏´‡∏£‡∏∑‡∏≠ OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`);
      return res.status(400).json({ 
        status: 'error',
        message: 'OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß' 
      });
    }

    console.log(`‚úÖ [CONFIRM OTP] OTP ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí Ref.Code: ${ref_code}`);
    return res.status(200).json({ 
      status: 'success',
      message: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö üéâ' 
    });

  } catch (err) {
    console.error(`üî• [CONFIRM OTP] ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: ${err.message}`);
    return res.status(500).json({ 
      status: 'error',
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP' 
    });
  }
};

/**
 * ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ OTP ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 */
const clearOtp = async (req, res) => {
  try {
    const { ref_code } = req.body;

    console.log(`üì© [CLEAR OTP] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á OTP ‚Üí Ref.Code: ${ref_code}`);

    const { data: checkData, error: checkError } = await supabase
      .from('auth_sessions')
      .select('otp_code')
      .eq('ref_code', ref_code)
      .maybeSingle();

    if (checkError) {
      console.error(`‚ùå [CLEAR OTP] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${checkError.message}`);
    } else if (!checkData || checkData.otp_code === null) {
      console.warn(`‚ö†Ô∏è [CLEAR OTP] ‡πÑ‡∏°‡πà‡∏û‡∏ö OTP ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‚Üí Ref.Code: ${ref_code}`);
    } else {
      console.log(`üîç [CLEAR OTP] ‡∏û‡∏ö OTP ‚Üí ${checkData.otp_code}`);
    }

    const { error: clearError } = await supabase
      .from('auth_sessions')
      .update({
        otp_code: null,
        updated_at: new Date().toISOString()
      })
      .eq('ref_code', ref_code);

    if (clearError) {
      console.error(`‚ùå [CLEAR OTP] ‡∏•‡πâ‡∏≤‡∏á OTP ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${clearError.message}`);
      return res.status(500).json({ 
        status: 'error',
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ OTP ‡πÑ‡∏î‡πâ' 
      });
    }

    console.log(`‚úÖ [CLEAR OTP] ‡∏•‡πâ‡∏≤‡∏á OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);

    const { error: updateError } = await supabase
      .from('auth_sessions')
      .update({
        verify_status: 'Active',
        updated_at: new Date().toISOString()
      })
      .eq('ref_code', ref_code);

    if (updateError) {
      console.warn(`‚ö†Ô∏è [CLEAR OTP] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${updateError.message}`);
    } else {
      console.log(`‚úÖ [CLEAR OTP] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï verify_status ‚Üí Verified ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    }

    return res.status(200).json({ 
      status: 'success',
      message: '‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' 
    });

  } catch (err) {
    console.error(`üî• [CLEAR OTP] ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: ${err.message}`);
    return res.status(500).json({ 
      status: 'error',
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ OTP' 
    });
  }
};

module.exports = {
  confirmOtp,
  clearOtp
};
