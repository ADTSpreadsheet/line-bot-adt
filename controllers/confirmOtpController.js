const { supabase } = require('../utils/supabaseClient');
const { sendLineMessage } = require('../utils/lineBot');

/**
 * ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á OTP ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @returns {Object} HTTP response
 */
const confirmOtp = async (req, res) => {
  try {
    const { ref_code, otp } = req.body;
    
    console.log(`üì© [CONFIRM OTP] ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‚Üí Ref.Code: ${ref_code}, OTP: ${otp}`);
    
    // STEP 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤
    console.log(`üîç [CONFIRM OTP] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Üí Ref.Code: ${ref_code}`);
    
    const { data, error } = await supabase
      .from('auth_sessions')  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å otp_sessions ‡πÄ‡∏õ‡πá‡∏ô auth_sessions
      .select('*')
      .eq('ref_code', ref_code)
      .eq('otp_code', otp)
      .maybeSingle();
    
    if (error) {
      console.error(`‚ùå [CONFIRM OTP] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ OTP: ${error.message}`);
      return res.status(500).json({ 
        status: 'error',
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP' 
      });
    }
    
    if (!data) {
      console.warn(`‚ö†Ô∏è [CONFIRM OTP] OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Üí Ref.Code: ${ref_code}`);
      return res.status(400).json({ 
        status: 'error',
        message: 'OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß' 
      });
    }
    
    console.log(`‚úÖ [CONFIRM OTP] ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí Ref.Code: ${ref_code}`);
    return res.status(200).json({ 
      status: 'success',
      message: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö üéâ' 
    });
    
  } catch (err) {
    console.error(`üî• [CONFIRM OTP] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: ${err.message}`);
    return res.status(500).json({ 
      status: 'error',
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP' 
    });
  }
};

/**
 * ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå OTP - ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ OTP ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @returns {Object} HTTP response
 */
const clearOtp = async (req, res) => {
  try {
    const { ref_code } = req.body;
    
    console.log(`üì© [CLEAR OTP] ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡πâ‡∏≤‡∏á OTP ‚Üí Ref.Code: ${ref_code}`);
    
    // ‡∏•‡πâ‡∏≤‡∏á OTP ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å auth_sessions
    console.log(`üßπ [CLEAR OTP] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πâ‡∏≤‡∏á OTP ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Üí Ref.Code: ${ref_code}`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏•‡πâ‡∏≤‡∏á
    const { data: checkData, error: checkError } = await supabase
      .from('auth_sessions')  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å otp_sessions ‡πÄ‡∏õ‡πá‡∏ô auth_sessions
      .select('otp_code')
      .eq('ref_code', ref_code)
      .maybeSingle();
      
    if (checkError) {
      console.error(`‚ùå [CLEAR OTP] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡πâ‡∏≤‡∏á: ${checkError.message}`);
    } else if (!checkData || checkData.otp_code === null) {
      console.warn(`‚ö†Ô∏è [CLEAR OTP] ‡πÑ‡∏°‡πà‡∏û‡∏ö OTP ‡∏´‡∏£‡∏∑‡∏≠ OTP ‡∏ñ‡∏π‡∏Å‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‚Üí Ref.Code: ${ref_code}`);
    } else {
      console.log(`üîç [CLEAR OTP] ‡∏û‡∏ö OTP ‚Üí Ref.Code: ${ref_code}, OTP: ${checkData.otp_code}`);
    }
    
    // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á OTP
    const { error: clearError } = await supabase
      .from('auth_sessions')  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å otp_sessions ‡πÄ‡∏õ‡πá‡∏ô auth_sessions
      .update({ 
        otp_code: null,
        updated_at: new Date().toISOString()
      })
      .eq('ref_code', ref_code);
      
    if (clearError) {
      console.error(`‚ùå [CLEAR OTP] ‡∏•‡πâ‡∏≤‡∏á OTP ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${clearError.message}`);
      return res.status(500).json({ 
        status: 'error',
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ OTP ‡πÑ‡∏î‡πâ' 
      });
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô auth_sessions
    console.log(`üîÑ [CLEAR OTP] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô Verified ‚Üí Ref.Code: ${ref_code}`);
    
    const { error: updateError } = await supabase
      .from('auth_sessions')
      .update({ 
        verify_status: 'Verified',
        updated_at: new Date().toISOString()
      })
      .eq('ref_code', ref_code);
      
    if (updateError) {
      console.warn(`‚ö†Ô∏è [CLEAR OTP] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${updateError.message}`);
    }
    
    console.log(`‚úÖ [CLEAR OTP] ‡∏•‡πâ‡∏≤‡∏á OTP ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí Ref.Code: ${ref_code}`);
    return res.status(200).json({ 
      status: 'success',
      message: '‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' 
    });
    
  } catch (err) {
    console.error(`üî• [CLEAR OTP] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: ${err.message}`);
    return res.status(500).json({ 
      status: 'error',
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ OTP' 
    });
  }
};

// ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
module.exports = {
  confirmOtp,
  clearOtp
};
