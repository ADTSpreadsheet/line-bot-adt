const { createClient } = require('@supabase/supabase-js');
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);
const logger = require('../utils/logger');

exports.login = async (req, res) => {
  const { username, password } = req.body;

  logger.info(`üü® [LOGIN] Checking login for username: ${username}`);

  // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Ñ‡∏£‡∏ö‡πÑ‡∏´‡∏°
  if (!username || !password) {
    logger.warn(`‚õî [LOGIN] Missing username or password`);
    return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Username ‡πÅ‡∏•‡∏∞ Password ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
  }

  try {
    // 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Supabase
    const { data, error } = await supabase
      .from('adt_users') // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏µ‡πà‡πÉ‡∏ä‡πâ
      .select('id, username, password, first_name, last_name')
      .eq('username', username)
      .single();

    // 3. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ username
    if (error || !data) {
      logger.warn(`‚ùå [LOGIN] Username not found: ${username}`);
      return res.status(401).json({ message: 'Invalid username or password' });
    }

    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö password (‡∏ï‡∏£‡∏á‡πÄ‡∏õ‡πä‡∏∞ ‚Äî ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ hash)
    if (data.password !== password) {
      logger.warn(`‚ùå [LOGIN] Incorrect password for username: ${username}`);
      return res.status(401).json({ message: 'Invalid username or password' });
    }

    // 5. ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üéâ
    logger.info(`‚úÖ [LOGIN] Success! Username: ${username}`);
    return res.status(200).json({
      message: 'Login successful',
      user: {
        id: data.id,
        username: data.username,
        name: `${data.first_name} ${data.last_name}`
      }
    });

  } catch (err) {
    logger.error(`üî• [LOGIN] Unexpected error: ${err.message}`);
    return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });
  }
};
