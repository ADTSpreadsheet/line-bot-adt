const { sendLineMessage } = require('../utils/lineBot');
const { supabase } = require('../utils/supabaseClient');
const OTP_EXPIRATION_MINUTES = 10;

const generateOtpCode = () => {
  const letter = String.fromCharCode(65 + Math.floor(Math.random() * 26));
  const number = Math.floor(1000 + Math.random() * 9000);
  return `${letter}${number}`;
};

const requestOtp = async (req, res) => {
  try {
    const { ref_code } = req.body;
    console.log(`üì© [OTP] Request received ‚Üí Ref.Code: ${ref_code}`);

    const { data: sessionData, error: sessionError } = await supabase
      .from('auth_sessions')
      .select('line_user_id, status, verify_status, expires_at, otp_count')
      .eq('ref_code', ref_code)
      .maybeSingle();

    if (sessionError || !sessionData) {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Ref.Code ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î error:', sessionError);
      return res.status(404).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Ref.Code ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }

    console.log('‚úÖ ‡∏û‡∏ö Ref.Code ‡πÅ‡∏•‡πâ‡∏ß:', sessionData);

    const now = new Date();

    if (sessionData.status === 'BLOCK') {
      console.warn(`üö´ Ref.Code: ${ref_code} ‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å`);
      return res.status(400).json({ status: 'error', message: 'Ref.Code ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å BLOCK ‡πÅ‡∏•‡πâ‡∏ß' });
    }

    if (new Date(sessionData.expires_at) <= now) {
      console.warn(`‚è≥ Ref.Code: ${ref_code} ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß`);
      await supabase
        .from('auth_sessions')
        .update({ verify_status: 'No Active' })
        .eq('ref_code', ref_code);

      return res.status(400).json({ status: 'error', message: 'Ref.Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß' });
    }

    // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà Active ‚Üí ‡πÉ‡∏´‡πâ Active
    if (sessionData.verify_status !== 'Active') {
      console.log(`üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï verify_status ‚Üí Active`);
      await supabase
        .from('auth_sessions')
        .update({ verify_status: 'Active' })
        .eq('ref_code', ref_code);
    }

    const otp = generateOtpCode();
    const otpCreatedAt = now.toISOString();
    const otpExpiresAt = new Date(now.getTime() + OTP_EXPIRATION_MINUTES * 60000).toISOString();

    console.log('üì≤ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï OTP ‡πÉ‡∏´‡∏°‡πà...');
    console.log('‚û°Ô∏è OTP:', otp);
    console.log('üìÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°:', otpCreatedAt, '| ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏:', otpExpiresAt);

    const { error: updateOtpError } = await supabase
      .from('auth_sessions')
      .update({
        otp_code: otp,
        otp_at: otpCreatedAt,
        otp_expires_at: otpExpiresAt,
        otp_count: (sessionData.otp_count || 0) + 1
      })
      .eq('ref_code', ref_code);

    if (updateOtpError) {
      console.error('‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï OTP ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', updateOtpError);
      return res.status(500).json({ status: 'error', message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï OTP ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    }

    console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô Supabase');

    if (sessionData.line_user_id) {
      console.log(`üì§ ‡∏™‡πà‡∏á OTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE USER: ${sessionData.line_user_id}`);
      await sendLineMessage(sessionData.line_user_id, `
üìå ‡∏£‡∏´‡∏±‡∏™ OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ADTSpreadsheet:
üîê OTP: ${otp}
üìã Ref.Code: ${ref_code}
‚è≥ ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô ${OTP_EXPIRATION_MINUTES} ‡∏ô‡∏≤‡∏ó‡∏µ
      `);
    } else {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö line_user_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ref.Code ‡∏ô‡∏µ‡πâ');
    }

    return res.status(200).json({ status: 'success', message: '‡∏™‡πà‡∏á OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });

  } catch (err) {
    console.error('üî• [OTP ERROR] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ:', err);
    return res.status(500).json({ status: 'error', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á OTP' });
  }
};


// ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
module.exports = {
  requestOtp,
  checkOtpStatus,
  resendOtp
};
