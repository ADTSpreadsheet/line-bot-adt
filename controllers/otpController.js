// controllers/otpController.js
const { v4: uuidv4 } = require('uuid');
const { sendLineMessage } = require('../utils/lineBot');
const { supabase } = require('../utils/supabaseClient');
const logger = require('../utils/logger');

// ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á OTP (‡∏ô‡∏≤‡∏ó‡∏µ)
const OTP_EXPIRATION_MINUTES = 10;
// ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å OTP ‡∏ú‡∏¥‡∏î
const MAX_FAILED_ATTEMPTS = 3;

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á OTP ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 */
exports.requestOtp = async (req, res) => {
  try {
    const { ref_code } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ref_code ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const { data: sessionData, error: sessionError } = await supabase
      .from('auth_sessions')
      .select('line_user_id, is_verified')
      .eq('ref_code', ref_code)
      .maybeSingle();

    if (sessionError || !sessionData) {
      logger.warn(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Ref.Code: ${ref_code}`);
      return res.status(404).json({ 
        status: 'error', 
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Ref.Code ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ref_code ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Serial Key ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!sessionData.is_verified) {
      logger.warn(`‚ö†Ô∏è Ref.Code: ${ref_code} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Serial Key`);
      return res.status(400).json({
        status: 'error',
        message: 'Ref.Code ‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Serial Key ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Serial Key ‡∏Å‡πà‡∏≠‡∏ô'
      });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á OTP 6 ‡∏´‡∏•‡∏±‡∏Å
    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    const now = new Date();
    const expiresAt = new Date(now.getTime() + OTP_EXPIRATION_MINUTES * 60 * 1000);

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏¥‡∏î
    const { error: updateError } = await supabase
      .from('auth_sessions')
      .update({
        otp_code: otp,
        otp_created_at: now.toISOString(),
        otp_expires_at: expiresAt.toISOString(),
        otp_failed_attempts: 0
      })
      .eq('ref_code', ref_code);

    if (updateError) {
      logger.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ref.Code: ${ref_code}`, updateError.message);
      throw updateError;
    }

    // ‡∏™‡πà‡∏á OTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ú‡πà‡∏≤‡∏ô LINE
    if (sessionData.line_user_id) {
      await sendLineMessage(sessionData.line_user_id, `
üìå ‡∏£‡∏´‡∏±‡∏™ OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ADTSpreadsheet:
üîê OTP: ${otp}
üìã Ref.Code: ${ref_code}
‚è≥ ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô ${OTP_EXPIRATION_MINUTES} ‡∏ô‡∏≤‡∏ó‡∏µ
      `);
    }

    logger.info(`üîê ‡∏™‡∏£‡πâ‡∏≤‡∏á OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ref.Code: ${ref_code}`);
    res.status(200).json({ 
      status: 'success', 
      message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á OTP ‡πÅ‡∏•‡πâ‡∏ß',
      expires_in: OTP_EXPIRATION_MINUTES * 60 // ‡∏™‡πà‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    });
  } catch (err) {
    logger.error('‚ùå requestOtp ERROR:', err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á OTP ‡πÑ‡∏î‡πâ',
      error: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
  }
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 */
exports.verifyOtp = async (req, res) => {
  try {
    const { ref_code, otp } = req.body;

    const { data, error } = await supabase
      .from('auth_sessions')
      .select('otp_code, otp_expires_at, otp_failed_attempts, line_user_id')
      .eq('ref_code', ref_code)
      .maybeSingle();

    if (error || !data) {
      logger.warn(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ref.Code: ${ref_code}`);
      return res.status(404).json({ 
        status: 'error', 
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OTP'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ OTP ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const now = new Date();
    const isExpired = new Date(data.otp_expires_at) < now;

    if (isExpired) {
      logger.warn(`‚ö†Ô∏è OTP ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ref.Code: ${ref_code}`);
      return res.status(400).json({ 
        status: 'error', 
        message: 'OTP ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ç‡∏≠ OTP ‡πÉ‡∏´‡∏°‡πà'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ OTP ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isMatch = data.otp_code === otp;

    if (!isMatch) {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏¥‡∏î
      const failedAttempts = (data.otp_failed_attempts || 0) + 1;
      
      await supabase
        .from('auth_sessions')
        .update({ otp_failed_attempts: failedAttempts })
        .eq('ref_code', ref_code);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (failedAttempts >= MAX_FAILED_ATTEMPTS) {
        logger.warn(`üîí ‡∏•‡πá‡∏≠‡∏Ñ OTP ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏¥‡∏î‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î Ref.Code: ${ref_code}`);
        
        // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ OTP ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        await supabase
          .from('auth_sessions')
          .update({ 
            otp_expires_at: now.toISOString()
          })
          .eq('ref_code', ref_code);
        
        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏≤‡∏á LINE
        if (data.line_user_id) {
          await sendLineMessage(data.line_user_id, `
‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å OTP ‡∏ú‡∏¥‡∏î‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
üîí ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å OTP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
üîê ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ç‡∏≠ OTP ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
          `);
        }
        
        return res.status(400).json({ 
          status: 'error', 
          message: '‡∏Å‡∏£‡∏≠‡∏Å OTP ‡∏ú‡∏¥‡∏î‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ç‡∏≠ OTP ‡πÉ‡∏´‡∏°‡πà'
        });
      }

      logger.warn(`‚ö†Ô∏è OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ref.Code: ${ref_code} (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${failedAttempts}/${MAX_FAILED_ATTEMPTS})`);
      return res.status(400).json({ 
        status: 'error', 
        message: `OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${failedAttempts}/${MAX_FAILED_ATTEMPTS})`,
        attempts_left: MAX_FAILED_ATTEMPTS - failedAttempts
      });
    }

    // OTP ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏¥‡∏î
    await supabase
      .from('auth_sessions')
      .update({ 
        otp_verified: true,
        otp_verified_at: now.toISOString(),
        otp_failed_attempts: 0
      })
      .eq('ref_code', ref_code);

    logger.info(`‚úÖ OTP ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ref.Code: ${ref_code}`);
    res.status(200).json({ 
      status: 'success', 
      message: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      verified_at: now.toISOString()
    });
  } catch (err) {
    logger.error('‚ùå verifyOtp ERROR:', err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      error: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
  }
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ OTP
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 */
exports.checkOtpStatus = async (req, res) => {
  try {
    const ref_code = req.method === 'GET' ? req.query.ref_code : req.body.ref_code;

    if (!ref_code) {
      return res.status(400).json({ 
        status: 'error', 
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Ref.Code'
      });
    }

    const { data, error } = await supabase
      .from('auth_sessions')
      .select('otp_code, otp_expires_at, otp_verified, otp_failed_attempts')
      .eq('ref_code', ref_code)
      .maybeSingle();

    if (error) {
      logger.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ref.Code: ${ref_code}`, error.message);
      throw error;
    }

    if (!data || !data.otp_code || !data.otp_expires_at) {
      return res.status(404).json({ 
        status: 'error', 
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö OTP ‡∏´‡∏£‡∏∑‡∏≠ OTP ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á'
      });
    }

    const now = new Date();
    const expiresAt = new Date(data.otp_expires_at);
    const isValid = now < expiresAt;
    const remainingSeconds = Math.max(0, Math.floor((expiresAt - now) / 1000));
    const remainingMinutes = Math.ceil(remainingSeconds / 60);

    res.status(200).json({
      status: 'success',
      is_valid: isValid,
      is_verified: !!data.otp_verified,
      expires_in_seconds: remainingSeconds,
      expires_in_minutes: remainingMinutes,
      attempts_left: MAX_FAILED_ATTEMPTS - (data.otp_failed_attempts || 0)
    });
  } catch (err) {
    logger.error('‚ùå checkOtpStatus ERROR:', err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ OTP ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      error: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
  }
};

/**
 * ‡∏™‡πà‡∏á OTP ‡∏ã‡πâ‡∏≥ (‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏î‡∏¥‡∏°)
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 */
exports.resendOtp = async (req, res) => {
  try {
    const { ref_code } = req.body;

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OTP ‡πÄ‡∏î‡∏¥‡∏°
    const { data, error } = await supabase
      .from('auth_sessions')
      .select('otp_code, otp_expires_at, line_user_id, otp_resend_count')
      .eq('ref_code', ref_code)
      .maybeSingle();

    if (error) {
      logger.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ref.Code: ${ref_code}`, error.message);
      throw error;
    }

    if (!data || !data.otp_code || !data.line_user_id) {
      logger.warn(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OTP ‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ref.Code: ${ref_code}`);
      return res.status(404).json({ 
        status: 'error', 
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö OTP ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      });
    }

    const now = new Date();
    const expiresAt = new Date(data.otp_expires_at);
    const isExpired = expiresAt < now;

    if (isExpired) {
      logger.warn(`‚ö†Ô∏è OTP ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ref.Code: ${ref_code}`);
      return res.status(400).json({ 
        status: 'error', 
        message: 'OTP ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ç‡∏≠‡πÉ‡∏´‡∏°‡πà'
      });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥
    const resendCount = (data.otp_resend_count || 0) + 1;
    
    await supabase
      .from('auth_sessions')
      .update({ otp_resend_count: resendCount })
      .eq('ref_code', ref_code);

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    const remainingMinutes = Math.ceil((expiresAt - now) / 60000);

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE
    await sendLineMessage(data.line_user_id, `
üîÅ ‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥‡∏£‡∏´‡∏±‡∏™ OTP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:
üîê OTP: ${data.otp_code}
üìã Ref.Code: ${ref_code}
‚è≥ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ ${remainingMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ
    `);

    logger.info(`üîÅ ‡∏™‡πà‡∏á OTP ‡∏ã‡πâ‡∏≥‡πÉ‡∏´‡πâ Ref.Code: ${ref_code} (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${resendCount})`);
    res.status(200).json({ 
      status: 'success', 
      message: '‡∏™‡πà‡∏á OTP ‡∏ã‡πâ‡∏≥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
      resend_count: resendCount,
      expires_in_minutes: remainingMinutes
    });
  } catch (err) {
    logger.error('‚ùå resendOtp ERROR:', err.message);
    res.status(500).json({ 
      status: 'error', 
      message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á OTP ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ',
      error: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
  }
};
