const { sendLineMessage } = require('../utils/lineBot');
const { supabase } = require('../utils/supabaseClient');
const OTP_EXPIRATION_MINUTES = 10; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤ OTP ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™ OTP
const generateOtpCode = () => {
  const letter = String.fromCharCode(65 + Math.floor(Math.random() * 26)); // A-Z
  const number = Math.floor(1000 + Math.random() * 9000); // 4 ‡∏´‡∏•‡∏±‡∏Å
  return ${letter}${number};
};

// ‚úÖ ‡∏Ç‡∏≠ OTP ‡πÉ‡∏´‡∏°‡πà
const requestOtp = async (req, res) => {
  try {
    const { ref_code } = req.body;

    const { data: sessionData, error: sessionError } = await supabase
      .from('auth_sessions')
      .select('line_user_id, status, verify_status, expires_at, otp_count')
      .eq('ref_code', ref_code)
      .maybeSingle();

    if (sessionError || !sessionData) {
      return res.status(404).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Ref.Code ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Ref.Code ‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const now = new Date();
    if (sessionData.status === 'BLOCK') {
      return res.status(400).json({ status: 'error', message: 'Ref.Code ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å BLOCK ‡πÅ‡∏•‡πâ‡∏ß' });
    }

    if (new Date(sessionData.expires_at) <= now) {
      await supabase
        .from('auth_sessions')
        .update({ verify_status: 'No Active' })
        .eq('ref_code', ref_code);

      return res.status(400).json({ status: 'error', message: 'Ref.Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß' });
    }

    // ‡∏ñ‡πâ‡∏≤ verify_status ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà Active ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏¢
    if (sessionData.verify_status !== 'Active') {
      await supabase
        .from('auth_sessions')
        .update({ verify_status: 'Active' })
        .eq('ref_code', ref_code);
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á OTP ‡πÉ‡∏´‡∏°‡πà
    const otp = generateOtpCode();
    const otpCreatedAt = now.toISOString();
    const otpExpiresAt = new Date(now.getTime() + OTP_EXPIRATION_MINUTES * 60000).toISOString();

    const { error: updateOtpError } = await supabase
      .from('auth_sessions')
      .update({
        otp_code: otp,
        otp_at: otpCreatedAt,
        otp_count: (sessionData.otp_count || 0) + 1
      })
      .eq('ref_code', ref_code);

    if (updateOtpError) {
      return res.status(500).json({ status: 'error', message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï OTP ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    }

    // ‡∏™‡πà‡∏á OTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE
    if (sessionData.line_user_id) {
      await sendLineMessage(sessionData.line_user_id, 
üìå ‡∏£‡∏´‡∏±‡∏™ OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ADTSpreadsheet:
üîê OTP: ${otp}
üìã Ref.Code: ${ref_code}
‚è≥ ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô ${OTP_EXPIRATION_MINUTES} ‡∏ô‡∏≤‡∏ó‡∏µ
      );
    }

    return res.status(200).json({ status: 'success', message: '‡∏™‡πà‡∏á OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });

  } catch (err) {
    console.error('‚ùå Error during OTP request:', err);
    return res.status(500).json({ status: 'error', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á OTP' });
  }
};

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ OTP
const checkOtpStatus = async (req, res) => {
  try {
    const { ref_code } = req.query;

    const { data, error } = await supabase
      .from('auth_sessions')
      .select('otp_code, otp_count verify_status')
      .eq('ref_code', ref_code)
      .maybeSingle();

    if (error || !data) {
      return res.status(404).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OTP' });
    }

    const now = new Date();
    const isExpired = new Date(data.otp_expires_at) <= now;

    return res.status(200).json({
      status: 'success',
      verify_status: data.verify_status,
    });

  } catch (err) {
    console.error('‚ùå Error checking OTP status:', err);
    return res.status(500).json({ status: 'error', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP' });
  }
};

// ‚úÖ ‡∏™‡πà‡∏á OTP ‡∏ã‡πâ‡∏≥ (logic ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ requestOtp)
const resendOtp = async (req, res) => {
  try {
    const { ref_code } = req.body;

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ requestOtp ‡πÑ‡∏õ‡πÄ‡∏•‡∏¢ (‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÅ‡∏¢‡∏Å‡∏Å‡πá‡πÑ‡∏î‡πâ)
    req.body.ref_code = ref_code;
    return requestOtp(req, res); // ‡πÉ‡∏ä‡πâ logic ‡πÄ‡∏î‡∏¥‡∏°

  } catch (err) {
    console.error('‚ùå Error during OTP resend:', err);
    return res.status(500).json({ status: 'error', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á OTP ‡∏ã‡πâ‡∏≥' });
  }
};

// ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
module.exports = {
  requestOtp,
  checkOtpStatus,
  resendOtp
};
