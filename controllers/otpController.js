exports.requestOtp = async (req, res) => {
  try {
    const { ref_code } = req.body;

    // ‚úÖ 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ Ref.Code ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const { data: sessionData, error: sessionError } = await supabase
      .from('auth_sessions')
      .select('line_user_id, is_verified')
      .eq('ref_code', ref_code)
      .maybeSingle();

    if (sessionError || !sessionData) {
      return res.status(404).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Ref.Code ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }

    // ‚úÖ 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ Ref.Code ‡∏ú‡πà‡∏≤‡∏ô Serial Key ‡πÅ‡∏•‡πâ‡∏ß
    if (!sessionData.is_verified) {
      return res.status(400).json({
        status: 'error',
        message: 'Ref.Code ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Serial Key'
      });
    }

    // ‚úÖ 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á OTP
    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    const now = new Date();
    const expiresAt = new Date(now.getTime() + OTP_EXPIRATION_MINUTES * 60000);

    const { error: updateError } = await supabase
      .from('auth_sessions')
      .update({
        otp: otp,
        otp_created_at: now.toISOString(),
        otp_expires_at: expiresAt.toISOString(),
        otp_failed_attempts: 0
      })
      .eq('ref_code', ref_code);

    if (updateError) {
      console.error(`‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï OTP ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${updateError.message}`);
      return res.status(500).json({ status: 'error', message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï OTP ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    }

    // ‚úÖ 4. ‡∏™‡πà‡∏á OTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE
    if (sessionData.line_user_id) {
      await sendLineMessage(sessionData.line_user_id, `
üìå ‡∏£‡∏´‡∏±‡∏™ OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ADTSpreadsheet:
üîê OTP: ${otp}
üìã Ref.Code: ${ref_code}
‚è≥ ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô ${OTP_EXPIRATION_MINUTES} ‡∏ô‡∏≤‡∏ó‡∏µ
      `);
    }

    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: Ref.Code ${ref_code}`);
    return res.status(200).json({ 
      status: 'success',
      message: '‡∏™‡πà‡∏á OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      expires_in: OTP_EXPIRATION_MINUTES * 60 
    });

  } catch (err) {
    console.error('‚ùå requestOtp ERROR:', err.message);
    return res.status(500).json({ status: 'error', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á OTP' });
  }
};
