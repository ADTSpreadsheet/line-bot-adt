const { sendLineMessage } = require('../utils/lineBot');
const { supabase } = require('../utils/supabaseClient');
const OTP_EXPIRATION_MINUTES = 10;

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á OTP ‡πÉ‡∏´‡∏°‡πà
const requestOtp = async (req, res) => {
  try {
    const { ref_code } = req.body;

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• auth_sessions ‡∏ï‡∏≤‡∏° ref_code
    const { data: sessionData, error: sessionError } = await supabase
      .from('auth_sessions')
      .select('line_user_id, status, is_verified')
      .eq('ref_code', ref_code)
      .maybeSingle();

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö Ref.Code ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (sessionError || !sessionData) {
      return res.status(404).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Ref.Code ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô "BLOCK" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (sessionData.status === 'BLOCK') {
      // ‡∏ñ‡πâ‡∏≤ Ref.Code ‡∏ñ‡∏π‡∏Å Blocked ‡πÅ‡∏•‡πâ‡∏ß
      return res.status(400).json({ status: 'error', message: 'Ref.Code ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å BLOCK ‡πÅ‡∏•‡πâ‡∏ß' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Serial Key ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (!sessionData.is_verified) {
      return res.status(400).json({ status: 'error', message: 'Ref.Code ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Serial Key' });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á OTP ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
    const otp = Math.floor(100000 + Math.random() * 900000).toString();

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤ OTP ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    const now = new Date();
    const expiresAt = new Date(now.getTime() + OTP_EXPIRATION_MINUTES * 60000);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï OTP ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const { error: updateError } = await supabase
      .from('auth_sessions')
      .update({
        otp,
        otp_created_at: now.toISOString(),
        otp_expires_at: expiresAt.toISOString(),
        otp_failed_attempts: 0
      })
      .eq('ref_code', ref_code);

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï OTP
    if (updateError) {
      return res.status(500).json({ status: 'error', message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï OTP ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    }

    // ‡∏™‡πà‡∏á OTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    if (sessionData.line_user_id) {
      await sendLineMessage(sessionData.line_user_id, `
üìå ‡∏£‡∏´‡∏±‡∏™ OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ADTSpreadsheet:
üîê OTP: ${otp}
üìã Ref.Code: ${ref_code}
‚è≥ ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô ${OTP_EXPIRATION_MINUTES} ‡∏ô‡∏≤‡∏ó‡∏µ
      `);
    }

    return res.status(200).json({ status: 'success', message: '‡∏™‡πà‡∏á OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });

  } catch (err) {
    return res.status(500).json({ status: 'error', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á OTP' });
  }
};

module.exports = {
  requestOtp
};
