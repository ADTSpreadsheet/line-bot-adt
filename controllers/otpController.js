const { sendLineMessage } = require('../utils/lineBot'); // ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE
const { supabase } = require('../utils/supabaseClient'); // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Supabase
const OTP_EXPIRATION_MINUTES = 10; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤ OTP ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ 10 ‡∏ô‡∏≤‡∏ó‡∏µ

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á OTP ‡πÉ‡∏´‡∏°‡πà
const requestOtp = async (req, res) => {
  try {
    const { ref_code } = req.body;

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• auth_sessions ‡∏ï‡∏≤‡∏° ref_code
    const { data: sessionData, error: sessionError } = await supabase
      .from('auth_sessions')
      .select('line_user_id, status, verify_status, expires_at')
      .eq('ref_code', ref_code)
      .maybeSingle();

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö Ref.Code ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (sessionError || !sessionData) {
      return res.status(404).json({ status: 'error', message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Ref.Code ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô "BLOCK" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (sessionData.status === 'BLOCK') {
      return res.status(400).json({ status: 'error', message: 'Ref.Code ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å BLOCK ‡πÅ‡∏•‡πâ‡∏ß' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Ref.Code ‡∏ô‡∏µ‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const now = new Date().toISOString();
    if (sessionData.expires_at <= now) {
      // ‡∏ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "No Active"
      await supabase
        .from('auth_sessions')
        .update({ verify_status: 'No Active' })
        .eq('ref_code', ref_code);

      return res.status(400).json({ status: 'error', message: 'Ref.Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß' });
    } else {
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "ACTIVE"
      await supabase
        .from('auth_sessions')
        .update({ verify_status: 'ACTIVE' })
        .eq('ref_code', ref_code);
    }

    // ‡∏ñ‡πâ‡∏≤ verify_status ‡πÄ‡∏õ‡πá‡∏ô ACTIVE, ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Generate OTP
    if (sessionData.verify_status === 'ACTIVE') {
      const otp = generateOtpCode(); // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á OTP
      const otpCreatedAt = new Date().toISOString();
      const otpExpiresAt = new Date(new Date().getTime() + OTP_EXPIRATION_MINUTES * 60000).toISOString(); // OTP ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï OTP ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô Supabase
      const { error: updateOtpError } = await supabase
        .from('auth_sessions')
        .update({
          otp_code: otp,
          otp_at: otpCreatedAt,
          otp_expires_at: otpExpiresAt,
          otp_count: (sessionData.otp_count || 0) + 1 // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠ OTP
        })
        .eq('ref_code', ref_code);

      if (updateOtpError) {
        return res.status(500).json({ status: 'error', message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï OTP ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
      }

      // ‡∏™‡πà‡∏á OTP ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ú‡πà‡∏≤‡∏ô LINE
      if (sessionData.line_user_id) {
        await sendLineMessage(sessionData.line_user_id, `
üìå ‡∏£‡∏´‡∏±‡∏™ OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ADTSpreadsheet:
üîê OTP: ${otp}
üìã Ref.Code: ${ref_code}
‚è≥ ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô ${OTP_EXPIRATION_MINUTES} ‡∏ô‡∏≤‡∏ó‡∏µ
        `);
      }

      return res.status(200).json({ status: 'success', message: '‡∏™‡πà‡∏á OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    }

  } catch (err) {
    console.error('‚ùå Error during OTP request:', err);
    return res.status(500).json({ status: 'error', message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á OTP' });
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á OTP (‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ 1 ‡∏ï‡∏±‡∏ß + ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 4 ‡∏ï‡∏±‡∏ß)
const generateOtpCode = () => {
  const letter = String.fromCharCode(65 + Math.floor(Math.random() * 26)); // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ A-Z
  const number = Math.floor(1000 + Math.random() * 9000); // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 4 ‡∏´‡∏•‡∏±‡∏Å
  return `${letter}${number}`;
};

module.exports = {
  requestOtp
};
