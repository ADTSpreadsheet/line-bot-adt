// controllers/registrationController.js
const { 
  createRefCodeInSupabase, 
  saveUserData, 
  getSerialKeyByRefCode, 
  resendSerialKeyToLine,
  checkRefCodeExists,
  validateTrialPeriod
} = require('../utils/database');
const { generateRefCode } = require('../utils/refCodeGenerator');
const { generateSerialKey } = require('../utils/serialKeyGenerator');
const { sendLineMessage } = require('../utils/lineBot');
const logger = require('../utils/logger');

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Ref.Code ‡πÅ‡∏•‡∏∞ Serial Key ‡πÉ‡∏´‡∏°‡πà
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 */
exports.createRefCode = async (req, res) => {
  try {
    const { line_user_id } = req.body;

    if (!line_user_id) {
      return res.status(400).json({
        status: 'error',
        message: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ line_user_id'
      });
    }

    const trialStatus = await validateTrialPeriod(line_user_id);
    if (trialStatus && trialStatus.isActive) {
      return res.status(400).json({
        status: 'error',
        message: `‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏µ‡∏Å ${trialStatus.daysLeft} ‡∏ß‡∏±‡∏ô`,
        data: { ref_code: trialStatus.ref_code }
      });
    }

    const ref_code = generateRefCode();
    const serial_key = generateSerialKey();

    const existingRefCode = await checkRefCodeExists(ref_code);
    if (existingRefCode) {
      logger.warn(`Ref.Code ${ref_code} ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...`);
      return this.createRefCode(req, res);
    }

    const result = await createRefCodeInSupabase(ref_code, serial_key, line_user_id);

    await sendLineMessage(line_user_id, `üîê Ref.Code ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: ${ref_code}`);

    logger.info(`‡∏™‡∏£‡πâ‡∏≤‡∏á Ref.Code ${ref_code} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${line_user_id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);

    res.status(200).json({
      status: 'success',
      message: 'Ref.Code ‡πÅ‡∏•‡∏∞ Serial Key ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß',
      data: { ref_code }
    });
  } catch (error) {
    logger.error('‚ùå createRefCode ERROR:', error);
    res.status(500).json({ 
      status: 'error', 
      message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Ref.Code ‡πÑ‡∏î‡πâ',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

exports.verifySerialKey = async (req, res) => {
  try {
    const { ref_code, serial_key } = req.body;

    if (!ref_code || !serial_key) {
      return res.status(400).json({
        status: 'error',
        message: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏±‡πâ‡∏á ref_code ‡πÅ‡∏•‡∏∞ serial_key'
      });
    }

    const result = await getSerialKeyByRefCode(ref_code, serial_key);

    if (!result) {
      logger.warn(`‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Serial Key ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ref.Code: ${ref_code}`);
      return res.status(400).json({ 
        status: 'error', 
        message: 'Serial Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏'
      });
    }

    if (result.isExpired) {
      return res.status(400).json({ 
        status: 'error', 
        message: 'Serial Key ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ç‡∏≠‡πÉ‡∏´‡∏°‡πà'
      });
    }

    await updateVerifyStatus(ref_code);

    logger.info(`‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Serial Key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ref.Code: ${ref_code} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);

    res.status(200).json({ 
      status: 'success', 
      message: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Serial Key ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: { 
        ref_code,
        expires_at: result.expires_at,
        trial_period_days: 7
      }
    });
  } catch (error) {
    logger.error('‚ùå verifySerialKey ERROR:', error);
    res.status(500).json({ 
      status: 'error', 
      message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Serial Key ‡πÑ‡∏î‡πâ',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

exports.completeRegistration = async (req, res) => {
  try {
    const { ref_code, machine_id, user_data } = req.body;

    if (!ref_code || !machine_id) {
      return res.status(400).json({
        status: 'error',
        message: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏±‡πâ‡∏á ref_code ‡πÅ‡∏•‡∏∞ machine_id'
      });
    }

    const refCodeStatus = await getRefCodeStatus(ref_code);
    if (!refCodeStatus) {
      return res.status(404).json({
        status: 'error',
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Ref.Code ‡∏ô‡∏µ‡πâ'
      });
    }

    if (!refCodeStatus.isVerified) {
      return res.status(400).json({
        status: 'error',
        message: 'Ref.Code ‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Serial Key'
      });
    }

    const result = await saveUserData(ref_code, machine_id, user_data);

    const trialPeriod = {
      start_date: new Date().toISOString(),
      end_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()
    };

    await saveTrialPeriod(ref_code, machine_id, trialPeriod);

    await sendLineMessage(refCodeStatus.line_user_id, `‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\nüñ•Ô∏è Machine ID: ${machine_id.substring(0, 8)}...\n‚è±Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏î‡∏•‡∏≠‡∏á: 7 ‡∏ß‡∏±‡∏ô (${new Date(trialPeriod.end_date).toLocaleDateString('th-TH')})\nüôè ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤`);

    logger.info(`‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ref.Code: ${ref_code}, Machine ID: ${machine_id}`);

    res.status(200).json({ 
      status: 'success', 
      message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: { trial_period: trialPeriod }
    });
  } catch (error) {
    logger.error('‚ùå completeRegistration ERROR:', error);
    res.status(500).json({ 
      status: 'error', 
      message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

exports.resendSerialKey = async (req, res) => {
  try {
    const { ref_code } = req.body;

    if (!ref_code) {
      return res.status(400).json({
        status: 'error',
        message: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ ref_code'
      });
    }

    const result = await resendSerialKeyToLine(ref_code);

    if (!result || !result.line_user_id || !result.serial_key) {
      logger.warn(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ref.Code: ${ref_code}`);
      return res.status(404).json({ 
        status: 'error', 
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ref.Code ‡∏ô‡∏µ‡πâ'
      });
    }

    if (result.isExpired) {
      return res.status(400).json({
        status: 'error',
        message: 'Ref.Code ‡∏ô‡∏µ‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ç‡∏≠‡πÉ‡∏´‡∏°‡πà'
      });
    }

    await sendLineMessage(result.line_user_id, `üì¢ ‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥‡∏£‡∏´‡∏±‡∏™‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:\nüîë Serial Key: ${result.serial_key}\nüìã Ref.Code: ${ref_code}\n‚è±Ô∏è ‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô: ${result.expiresInMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`);

    logger.info(`‡∏™‡πà‡∏á Serial Key ‡∏ã‡πâ‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ref.Code: ${ref_code} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);

    res.status(200).json({ 
      status: 'success', 
      message: '‡∏™‡πà‡∏á Serial Key ‡∏ã‡πâ‡∏≥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'
    });
  } catch (error) {
    logger.error('‚ùå resendSerialKey ERROR:', error);
    res.status(500).json({ 
      status: 'error', 
      message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á Serial Key ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

const updateVerifyStatus = async (ref_code) => {
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤ verify ‡πÅ‡∏•‡πâ‡∏ß
};

const getRefCodeStatus = async (ref_code) => {
  // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Ref.Code
};

const saveTrialPeriod = async (ref_code, machine_id, trialPeriod) => {
  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ
};
