const { supabase } = require('../utils/supabaseClient');
const bcrypt = require('bcryptjs');
const line = require('@line/bot-sdk');
const logger = require('../utils/logger');

const config = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET
};

const client = new line.Client(config);

const setupPassword = async (req, res) => {
  try {
    const { ref_code, license_no, password } = req.body;

    logger.info(`[SETUP-PASSWORD] üì• ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Üí ref_code: ${ref_code}, license_no: ${license_no}`);

    if (!ref_code || !license_no || !password) {
      logger.warn(`[SETUP-PASSWORD] ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö`);
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    // üîç ‡∏î‡∏∂‡∏á line_user_id ‡∏à‡∏≤‡∏Å license_holders
    const { data: sessionData, error: sessionError } = await supabase
      .from('license_holders')
      .select('line_user_id')
      .eq('ref_code', ref_code)
      .maybeSingle();

    if (sessionError) {
      logger.error(`[SETUP-PASSWORD] ‚ùå ‡∏î‡∏∂‡∏á line_user_id ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${sessionError.message}`);
      return res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á line_user_id ‡πÑ‡∏î‡πâ' });
    }

    const lineUserId = sessionData?.line_user_id || null;

    // üîç ‡∏î‡∏∂‡∏á username ‡∏à‡∏≤‡∏Å license_holders
    const { data: userData, error: userError } = await supabase
      .from('license_holders')
      .select('username')
      .eq('ref_code', ref_code)
      .eq('license_no', license_no)
      .maybeSingle();

    if (userError || !userData) {
      logger.warn(`[SETUP-PASSWORD] ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö username ‡∏à‡∏≤‡∏Å license_holders`);
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' });
    }

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    const { error: updateError } = await supabase
      .from('license_holders')
      .update({
        password: hashedPassword,
        status: 'ACTIVATED'
      })
      .eq('ref_code', ref_code)
      .eq('license_no', license_no);

    if (updateError) {
      logger.error(`[SETUP-PASSWORD] ‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï password ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${updateError.message}`);
      return res.status(500).json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    }

    // ‚úâÔ∏è ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE
    const message = [
      '‚úÖ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö',
      `License No: ${license_no}`,
      `Ref.Code: ${ref_code}`,
      `Username: ${userData.username}`,
      `Password: ${password}`
    ].join('\n');

    // ‚úÖ ‡∏™‡πà‡∏á LINE ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ line_user_id
    let messageSent = false;

    if (lineUserId) {
      try {
        await client.pushMessage(lineUserId, {
          type: 'text',
          text: message
        });
        logger.info(`[SETUP-PASSWORD] ‚úÖ ‡∏™‡πà‡∏á LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí ${lineUserId}`);
        messageSent = true;
      } catch (lineErr) {
        logger.warn(`[SETUP-PASSWORD] ‚ö†Ô∏è ‡∏™‡πà‡∏á LINE ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${lineErr.message}`);
      }
    } else {
      logger.warn(`[SETUP-PASSWORD] ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö line_user_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ref_code: ${ref_code}`);
    }

    // ‚úÖ ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö VBA
    return res.status(200).json({
      success: true,
      message: messageSent
        ? '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô LINE ‡πÅ‡∏•‡πâ‡∏ß'
        : '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á LINE ‡πÑ‡∏î‡πâ)'
    });

  } catch (err) {
    logger.error(`[SETUP-PASSWORD] ‚ùå Exception: ${err.message}`);
    return res.status(500).json({
      success: false,
      message: 'Internal Server Error',
      error: err.message
    });
  }
};

module.exports = { setupPassword };
