const { supabase } = require('../utils/supabaseClient');

const setupUsername = async (req, res) => {
  try {
    const data = req.body;

    console.log('üì• [SETUP USERNAME] ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‚Üí', JSON.stringify(data, null, 2));

    // STEP 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤
    const requiredFields = [
      'ref_code', 'license_no', 'gender', 'first_name', 'last_name', 'nickname', 'age',
      'occupation', 'phone_number', 'email', 'address', 'district', 'province',
      'postal_code', 'facebook_url', 'line_id', 'eng_license', 'username', 'pdpa_status'
    ];

    for (const field of requiredFields) {
      if (!data[field] || data[field].toString().trim() === '') {
        console.warn(`‚ö†Ô∏è [VALIDATION] ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö: ${field}`);
        return res.status(400).json({ message: `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: ${field}` });
      }
    }

    // STEP 2: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï auth_sessions
    const { error: authError } = await supabase
      .from('auth_sessions')
      .update({
        gender: data.gender,
        first_name: data.first_name,
        last_name: data.last_name,
        nickname: data.nickname,
        age: data.age,
        occupation: data.occupation,
        phone_number: data.phone_number,
        email: data.email,
        house_number: data.address,
        district: data.district,
        province: data.province,
        postal_code: data.postal_code,
        facebook_url: data.facebook_url,
        line_id: data.line_id,
        pdpa_status: data.pdpa_status,
        source: 'license_verified'
        
      })
      .eq('ref_code', data.ref_code);

    if (authError) {
      console.error('‚ùå [auth_sessions] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', authError.message);
      return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï auth_sessions', error: authError.message });
    }

    console.log('‚úÖ [auth_sessions] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');

    // STEP 3: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï license_holders
    const { error: licenseError } = await supabase
      .from('license_holders')
      .update({
        gender: data.gender,
        first_name: data.first_name,
        last_name: data.last_name,
        nickname: data.nickname,
        age: data.age,
        occupation: data.occupation,
        phone_number: data.phone_number,
        email: data.email,
        address: data.address,
        district: data.district,
        province: data.province,
        postal_code: data.postal_code,
        eng_license: data.eng_license || null,
        line_id: data.line_id,
        username: data.username,
        pdpa_status: data.pdpa_status,
        
      })
      .match({ ref_code: data.ref_code, license_no: data.license_no });

    if (licenseError) {
      console.error('‚ùå [license_holders] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', licenseError.message);
      return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï license_holders', error: licenseError.message });
    }

    console.log('‚úÖ [license_holders] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');

    // STEP 4: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username ‡∏ã‡πâ‡∏≥‡πÅ‡∏ö‡∏ö exact match
const { data: sameUsername, error: usernameError } = await supabase
  .from('license_holders')
  .select('username')
  .eq('username', data.username); // üîÑ ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å .ilike ‚Üí .eq

if (usernameError) {
  console.error('‚ùå [username-check] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Username ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', usernameError.message);
  return res.status(500).json({
    message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Username',
    error: usernameError.message
  });
}

if (sameUsername && sameUsername.length > 0) {
  console.warn('‚ö†Ô∏è [username-check] ‡∏û‡∏ö Username ‡∏ã‡πâ‡∏≥:', sameUsername.map(u => u.username));
  return res.status(409).json({
    message: 'Username ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô'
  });
}

console.log('‚úÖ [username-check] ‡πÑ‡∏°‡πà‡∏û‡∏ö Username ‡∏ã‡πâ‡∏≥ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');

// STEP 5: ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
console.log('üéâ [COMPLETE] ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
return res.status(200).json({
  message: 'Username ‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ'
});


module.exports = { setupUsername };
