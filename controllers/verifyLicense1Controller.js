const { supabase } = require('../utils/supabaseClient');
const logger = require('../utils/logger');

//---------------------------------------------------------------
// verifyLicense1 ‚Äì ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å license_no, national_id, phone_number, machine_id
//---------------------------------------------------------------
const verifyLicense1 = async (req, res) => {
  try {
    const { license_no, national_id, phone_number, machine_id } = req.body;

    logger.info(`[VERIFY1] üì• ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‚Üí license_no: ${license_no}, national_id: ${national_id || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}, phone_number: ${phone_number || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}, machine_id: ${machine_id}`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ license_no ‡πÅ‡∏•‡∏∞ phone_number ‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!license_no || !phone_number) {
      logger.warn(`[VERIFY1] ‚ö†Ô∏è [STATUS 400] ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‚Üí ‡πÑ‡∏°‡πà‡∏°‡∏µ license_no ‡∏´‡∏£‡∏∑‡∏≠ phone_number`);
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏•‡∏¥‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ license_no ‡πÅ‡∏•‡∏∞ phone_number ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const { data: userCheck, error: userError } = await supabase
      .from('license_holders')
      .select('license_no, first_name, last_name, national_id')
      .eq('license_no', license_no)
      .eq('phone_number', phone_number)
      .single();

    // ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö license_no ‡πÅ‡∏•‡∏∞ phone_number
    if (userCheck) {
      // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏°‡∏µ national_id ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
      if (!userCheck.national_id || userCheck.national_id === '') {
        logger.info(`[VERIFY1] üü¶ [STATUS 206] ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô ‚Üí license: ${license_no}`);
        return res.status(206).json({
          license_no: userCheck.license_no,
          full_name: `${userCheck.first_name} ${userCheck.last_name}`,
          message: '‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô'
        });
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ license_no ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const { data: licenseCheck, error: licenseError } = await supabase
      .from('license_holders')
      .select('license_no, status, verify_count, is_verify')
      .eq('license_no', license_no)
      .single();

    if (licenseError || !licenseCheck) {
      logger.warn(`[VERIFY1] ‚ùå [STATUS 404] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏•‡∏¥‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå ‚Üí license: ${license_no}`);
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏•‡∏¥‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }

    if (licenseCheck.is_verify === true) {
      const { data: licenseData } = await supabase
        .from('license_holders')
        .select('license_no, first_name, last_name, machine_id_1, machine_id_2, mid_status')
        .eq('license_no', license_no)
        .single();

      if (
        licenseData.machine_id_1 === machine_id ||
        licenseData.machine_id_2 === machine_id
      ) {
        logger.info(`[VERIFY1] ‚úÖ [STATUS 200] ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏•‡πâ‡∏ß ‚Üí license: ${license_no}, is_verify: ${licenseData.mid_status}`);
        return res.status(200).json({
          is_verify: licenseData.mid_status,
          message: 'This device is already verified and authorized.',
          license_no: licenseData.license_no,
          full_name: `${licenseData.first_name} ${licenseData.last_name}`
        });
      }

      if (
        licenseData.machine_id_1 &&
        licenseData.machine_id_2 &&
        licenseData.machine_id_1 !== machine_id &&
        licenseData.machine_id_2 !== machine_id
      ) {
        logger.warn(`[VERIFY1] ‚ùå [STATUS 422] ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö 2 ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‚Üí license: ${license_no}`);
        return res.status(422).json({
          is_verify: 'DEVICE_LIMIT_REACHED',
          message: 'You have already used this license on 2 devices. Please contact ADT-Admin.'
        });
      }

      logger.info(`[VERIFY1] üü® [STATUS 202] ‡∏û‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‚Üí license: ${license_no}`);
      return res.status(200).json({
        is_verify: 'NEED_CONFIRM_DEVICE_2',
        message: 'Second device detected. Please confirm registration.',
        license_no: licenseData.license_no,
        full_name: `${licenseData.first_name} ${licenseData.last_name}`
      });
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ national_id ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
    if (national_id) {
      const { data } = await supabase
        .from('license_holders')
        .select('license_no, first_name, last_name, verify_count')
        .eq('license_no', license_no)
        .eq('national_id', national_id)
        .eq('phone_number', phone_number)
        .single();

      if (data) {
        await supabase
          .from('license_holders')
          .update({ 
            is_verify: 'TRUE', 
            machine_id_1: machine_id, 
            mid_status: '1-DEVICE' 
          })
          .eq('license_no', license_no);

        logger.info(`[VERIFY1] üöÄ [STATUS 200] ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí license: ${license_no}`);
        return res.status(200).json({
          license_no: data.license_no,
          full_name: `${data.first_name} ${data.last_name}`,
          message: 'Your copyright has been successfully verified.',
          is_verify: 'TRUE'
        });
      }
    }

    const verifyCount = licenseCheck.verify_count || 0;

    if (verifyCount < 3) {
      const newCount = verifyCount + 1;
      await supabase
        .from('license_holders')
        .update({ verify_count: newCount })
        .eq('license_no', license_no);

      logger.warn(`[VERIFY1] ‚ùå [STATUS 401] ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á ‚Üí license: ${license_no}, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${newCount}`);
      return res.status(401).json({
        message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        verify_count: newCount,
        attempts_remaining: `‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å ${3 - newCount} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`
      });
    }

    await supabase
      .from('license_holders')
      .update({ verify_count: 4 })
      .eq('license_no', license_no);

    logger.warn(`[VERIFY1] üö´ [STATUS 403] ‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å - ‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‚Üí license: ${license_no}`);
    return res.status(403).json({ message: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏¥‡∏î‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö' });
  } catch (err) {
    logger.error(`‚ùå [STATUS 500] VERIFY LICENSE1 ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.message}`);
    return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' });
  }
};

//---------------------------------------------------------------
// confirmDevice2 ‚Äì ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
//---------------------------------------------------------------
const confirmDevice2 = async (req, res) => {
  try {
    const { license_no, machine_id } = req.body;

    logger.info(`[CONFIRM2] üì• ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà 2 ‚Üí license: ${license_no}, machine_id: ${machine_id}`);

    const { data } = await supabase
      .from('license_holders')
      .select('machine_id_1, machine_id_2')
      .eq('license_no', license_no)
      .single();

    if (!data) {
      logger.warn(`[CONFIRM2] ‚ùå [STATUS 404] ‡πÑ‡∏°‡πà‡∏û‡∏ö license_no: ${license_no}`);
      return res.status(404).json({ message: 'License not found.' });
    }

    if (data.machine_id_1 === machine_id || data.machine_id_2 === machine_id) {
      logger.info(`[CONFIRM2] ‚úÖ [STATUS 200] ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏¢‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‚Üí license: ${license_no}`);
      return res.status(200).json({
        message: 'Device already registered.',
        mid_status: data.machine_id_1 === machine_id ? '1-DEVICE' : '2-DEVICE'
      });
    }

    let updateObj = { is_verify: true }; // ‡πÄ‡∏û‡∏¥‡πà‡∏° is_verify ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢
    let newStatus = '';
    if (!data.machine_id_1) {
      updateObj = { ...updateObj, machine_id_1: machine_id, mid_status: '1-DEVICE' };
      newStatus = '1-DEVICE';
    } else if (!data.machine_id_2) {
      updateObj = { ...updateObj, machine_id_2: machine_id, mid_status: '2-DEVICE' };
      newStatus = '2-DEVICE';
    } else {
      logger.warn(`[CONFIRM2] ‚ùå [STATUS 422] ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö 2 ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‚Üí license: ${license_no}`);
      return res.status(422).json({ message: 'Device limit exceeded.', is_verify: 'DEVICE_LIMIT_REACHED' });
    }

    await supabase
      .from('license_holders')
      .update(updateObj)
      .eq('license_no', license_no);

    logger.info(`[CONFIRM2] üéØ [STATUS 200] ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà 2 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí license: ${license_no}`);
    return res.status(200).json({
      message: 'Device registered as second device successfully.',
      is_verify: 'TRUE'
    });

  } catch (err) {
    logger.error(`[CONFIRM2] ‚ùå [STATUS 500] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.message}`);
    return res.status(500).json({ message: 'Internal server error.' });
  }
};

//---------------------------------------------------------------
// submitNationalID ‚Äì ‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô is_verify: true
//---------------------------------------------------------------
const submitNationalID = async (req, res) => {
  try {
    const { license_no, national_id, machine_id } = req.body;

    logger.info(`[SUBMIT NID] üì• ‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö license: ${license_no}, machine_id: ${machine_id}`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ machine_id ‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!machine_id) {
      logger.warn(`[SUBMIT NID] ‚ö†Ô∏è [STATUS 400] ‡πÑ‡∏°‡πà‡∏°‡∏µ machine_id ‚Üí license: ${license_no}`);
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ machine_id' });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏ï‡∏£‡∏á‡∏°‡∏≤ ‡πÑ‡∏°‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
    const updateObj = { 
      national_id: national_id,
      is_verify: 'TRUE',
      machine_id_1: machine_id, 
      mid_status: '1-DEVICE'
    };
    
    // ‡∏•‡πá‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    logger.info(`[SUBMIT NID] üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Üí ${JSON.stringify(updateObj)}`);

    const { data, error } = await supabase
      .from('license_holders')
      .update(updateObj)
      .eq('license_no', license_no)
      .select()
      .single();

    if (error || !data) {
      logger.warn(`[SUBMIT NID] ‚ùå [STATUS 404] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‚Üí license: ${license_no}, error: ${error?.message || '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}`);
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ' });
    }

    logger.info(`[SUBMIT NID] ‚úÖ [STATUS 200] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí license: ${license_no}, is_verify: ${data.is_verify}, mid_status: ${data.mid_status}`);
    return res.status(200).json({
      message: 'National ID saved and license verified successfully.',
      is_verify: 'TRUE'
    });
  } catch (err) {
    logger.error(`[SUBMIT NID] ‚ùå [STATUS 500] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.message}`);
    return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
  }
};

module.exports = {
  verifyLicense1,
  confirmDevice2,
  submitNationalID
};
