//---------------------------------------------------------------
// controllers/VerifyLicense2Controller.js
//---------------------------------------------------------------
const { supabase } = require('../utils/supabaseClient');
const logger = require('../utils/logger');

//---------------------------------------------------------------
// verifyLicense2 ‚Äì ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ref_code ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á serial_key ‡πÑ‡∏õ‡∏¢‡∏±‡∏á line_user_id
//---------------------------------------------------------------
const verifyLicense2 = async (req, res) => {
  try {
    const { ref_code, line_user_id } = req.body;

    logger.info(`[VERIFY2] üì• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Ref.Code ‚Üí ref_code: ${ref_code}, line_user_id: ${line_user_id}`);

    if (!ref_code || !line_user_id) {
      logger.warn(`[VERIFY2] ‚ö†Ô∏è [STATUS 400] ‡∏Ç‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ref_code ‡∏´‡∏£‡∏∑‡∏≠ line_user_id`);
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Ref.Code ‡πÅ‡∏•‡∏∞ Line User ID ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }

    const { data, error } = await supabase
      .from('auth_sessions')
      .select('serial_key')
      .eq('ref_code', ref_code)
      .eq('status', 'ACTIVE')
      .single();

    if (error || !data) {
      logger.warn(`[VERIFY2] ‚ùå [STATUS 404] ‡πÑ‡∏°‡πà‡∏û‡∏ö Ref.Code ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ACTIVE ‚Üí ref_code: ${ref_code}`);
      return res.status(404).json({ message: 'Ref.Code ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏' });
    }

    // TODO: ‡∏™‡πà‡∏á serial_key ‡πÑ‡∏õ‡∏¢‡∏±‡∏á line_user_id ‡∏ú‡πà‡∏≤‡∏ô LINE Messaging API
    logger.info(`[VERIFY2] ‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ref.Code ‡∏™‡πà‡∏á Serial Key ‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‚Üí serial_key: ${data.serial_key}`);

    return res.status(200).json({
      message: 'Serial Key ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‡πÅ‡∏•‡πâ‡∏ß',
      serial_key: data.serial_key,
      ref_code
    });

  } catch (err) {
    logger.error(`[VERIFY2] ‚ùå [STATUS 500] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.message}`);
    return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' });
  }
};
//---------------------------------------------------------------
// verifyRefCodeAndSerial ‚Äì ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Ref.Code ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á Serial Key ‡πÑ‡∏õ LINE
//---------------------------------------------------------------
const verifyRefCodeAndSerial = async (req, res) => {
  try {
    const { ref_code } = req.body;

    const { data, error } = await supabase
      .from('auth_sessions')
      .select('serial_key, line_user_id')
      .eq('ref_code', ref_code)
      .eq('status', 'ACTIVE')
      .single();

    if (error || !data) {
      return res.status(404).json({ message: 'Ref.Code ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏' });
    }

    logger.info('[LINE BOT] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á Serial Key ‡∏ú‡πà‡∏≤‡∏ô LINE', data);

    return res.status(200).json({
      ref_code,
      serial_key: data.serial_key,
      message: 'Serial Key ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‡πÅ‡∏•‡πâ‡∏ß'
    });
  } catch (err) {
    console.error('‚ùå [ERROR] VERIFY REF CODE AND SERIAL', err);
    return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Serial Key' });
  }
};

module.exports = {
  verifyLicense2,
  verifyRefCodeAndSerial
};
