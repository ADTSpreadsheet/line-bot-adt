/**
 * controllers/lineWebhookController.js
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ webhook ‡∏à‡∏≤‡∏Å LINE Messaging API
 */

const { validateLineSignature } = require('../utils/helpers');
const CONFIG = require('../config');
const lineService = require('../services/lineService');
const authService = require('../services/authService');

/**
 * ‡∏£‡∏±‡∏ö Webhook ‡∏à‡∏≤‡∏Å LINE
 */
const handleWebhook = async (req, res) => {
  try {
    const signature = req.headers['x-line-signature'];
    const events = req.body.events;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô
    const isValid = validateLineSignature(req.body, signature, CONFIG.LINE.BOT1.CHANNEL_SECRET);
    if (!isValid) {
      console.error('‚ùå Invalid signature');
      return res.status(401).send('Invalid signature');
    }

    if (!events || events.length === 0) {
      return res.status(200).end();
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å event ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    await Promise.all(events.map(handleEvent));
    return res.status(200).end();
  } catch (error) {
    console.error('Webhook Error:', error);
    return res.status(500).json({ error: 'Internal Server Error', message: error.message });
  }
};

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ event
 */
const handleEvent = async (event) => {
  if (event.type !== 'message' || event.message.type !== 'text') return;

  const userId = event.source.userId;
  const messageText = event.message.text.trim();

  console.log(`üì© Received message from ${userId}: ${messageText}`);

  if (messageText === 'REQ_REFCODE') {
    return handleRefCodeRequest(userId, event.replyToken);
  }

  if (messageText === 'myid') {
    return lineService.replyMessage(event.replyToken, {
      type: 'text',
      text: `üÜî LINE User ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠:\n${userId}`
    });
  }

  return lineService.replyMessage(event.replyToken, {
    type: 'text',
    text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏û‡∏¥‡∏°‡∏û‡πå REQ_REFCODE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á'
  });
};

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠ Ref.Code (‡∏û‡∏£‡πâ‡∏≠‡∏° Serial Key)
 */
const handleRefCodeRequest = async (userId, replyToken) => {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Ref Code ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingSession = await authService.checkActiveRefCode(userId);

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
    if (existingSession && existingSession.status === 'SUCCESS') {
      return lineService.replyMessage(replyToken, {
        type: 'text',
        text: `‚úÖ ‡∏Ñ‡∏∏‡∏ì‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\nSerial Key: ${existingSession.serial_key}`
      });
    }

    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ Ref Code ‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    if (existingSession && existingSession.status === 'PENDING') {
      const remainingMs = new Date(existingSession.expires_at) - new Date();
      const minutes = Math.ceil(remainingMs / 60000);

      return lineService.replyMessage(replyToken, {
        type: 'text',
        text: `‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ Ref.Code ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà\n‡∏£‡∏´‡∏±‡∏™: ${existingSession.ref_code}\n‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`
      });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Ref Code + Serial Key ‡πÉ‡∏´‡∏°‡πà
    const result = await authService.createNewRefCode(userId);

    if (!result.success) {
      return lineService.replyMessage(replyToken, {
        type: 'text',
        text: result.message
      });
    }

    const message = `‡∏£‡∏´‡∏±‡∏™‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: ${result.refCode}\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ô VBA ‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Verify\nSerial Key ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô`;

    return lineService.replyMessage(replyToken, {
      type: 'text',
      text: message
    });
  } catch (error) {
    console.error('Error in handleRefCodeRequest:', error);
    return lineService.replyMessage(replyToken, {
      type: 'text',
      text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á'
    });
  }
};

module.exports = {
  handleWebhook
};
