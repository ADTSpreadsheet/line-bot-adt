// database.js - ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Supabase

const { createClient } = require('@supabase/supabase-js');

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Supabase client
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå SUPABASE_URL ‡∏´‡∏£‡∏∑‡∏≠ SUPABASE_KEY ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î');
  process.exit(1);
}

console.log('üîå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Supabase URL:', supabaseUrl);
const supabase = createClient(supabaseUrl, supabaseKey);

// ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á
const SESSIONS_TABLE = 'auth_sessions';

/**
 * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ session ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @param {string} lineUserId - ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ LINE
 * @param {string} status - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á session (PENDING, VERIFIED, EXPIRED)
 * @returns {Promise<Object|null>} - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
 */
async function findActiveSessionByUser(lineUserId, status = 'PENDING') {
  console.log(`üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ session ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö userId: ${lineUserId}, status: ${status}`);
  
  try {
    const now = new Date().toISOString();
    
    const { data, error } = await supabase
      .from(SESSIONS_TABLE)
      .select('*')
      .eq('line_user_id', lineUserId)
      .eq('status', status)
      .gt('expires_at', now)
      .order('created_at', { ascending: false })
      .limit(1);
    
    if (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ session:', error);
      return null;
    }
    
    if (data && data.length > 0) {
      console.log(`‚úÖ ‡∏û‡∏ö session ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${data[0].ref_code}`);
      return data[0];
    }
    
    console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö session ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
    return null;
  } catch (err) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ session:', err);
    return null;
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡πÉ‡∏´‡∏°‡πà
 * @param {Object} sessionData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á session ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á
 * @returns {Promise<Object>} - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á session
 */
async function createSession(sessionData) {
  console.log('üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡πÉ‡∏´‡∏°‡πà');
  
  try {
    const { data, error } = await supabase
      .from(SESSIONS_TABLE)
      .insert([sessionData])
      .select();
    
    if (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á session:', error);
      return { data: null, error };
    }
    
    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${data[0].ref_code}`);
    return { data: data[0], error: null };
  } catch (err) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á session:', err);
    return { data: null, error: err };
  }
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï session ‡∏ï‡∏≤‡∏° ref_code
 * @param {string} refCode - Ref.Code ‡∏Ç‡∏≠‡∏á session ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
 * @param {Object} updateData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
 * @returns {Promise<Object>} - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï session
 */
async function updateSessionByRefCode(refCode, updateData) {
  console.log(`üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï session ref_code: ${refCode}`);
  
  try {
    updateData.updated_at = new Date().toISOString();
    
    const { data, error } = await supabase
      .from(SESSIONS_TABLE)
      .update(updateData)
      .eq('ref_code', refCode)
      .select();
    
    if (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï session:', error);
      return { data: null, error };
    }
    
    if (data && data.length > 0) {
      console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï session ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${refCode}`);
      return { data: data[0], error: null };
    }
    
    console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö session ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: ${refCode}`);
    return { data: null, error: new Error('Session not found') };
  } catch (err) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï session:', err);
    return { data: null, error: err };
  }
}

/**
 * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ session ‡∏ï‡∏≤‡∏° ref_code
 * @param {string} refCode - Ref.Code ‡∏Ç‡∏≠‡∏á session ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
 * @returns {Promise<Object|null>} - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
 */
async function findSessionByRefCode(refCode) {
  console.log(`üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ session ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ref_code: ${refCode}`);
  
  try {
    const { data, error } = await supabase
      .from(SESSIONS_TABLE)
      .select('*')
      .eq('ref_code', refCode)
      .limit(1);
    
    if (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ session:', error);
      return null;
    }
    
    if (data && data.length > 0) {
      console.log(`‚úÖ ‡∏û‡∏ö session: ${refCode}`);
      return data[0];
    }
    
    console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö session ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ref_code: ${refCode}`);
    return null;
  } catch (err) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ session:', err);
    return null;
  }
}

module.exports = {
  findActiveSessionByUser,
  createSession,
  updateSessionByRefCode,
  findSessionByRefCode
};
