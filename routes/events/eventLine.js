const express = require('express');
const router = express.Router();

const { supabase } = require('../../utils/supabaseClient');
const line = require('@line/bot-sdk');
const { createModuleLogger } = require('../../utils/logger');
const log = createModuleLogger('ADTLine-Bot');

// LINE CONFIG
const config = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET
};

const client = new line.Client(config);

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Ref.Code + Serial Key
function generateRefCode() {
  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const digits = '0123456789';
  const randLetter1 = letters.charAt(Math.floor(Math.random() * letters.length));
  const randLetter2 = letters.charAt(Math.floor(Math.random() * letters.length));
  const randDigit1 = digits.charAt(Math.floor(Math.random() * digits.length));
  const randDigit2 = digits.charAt(Math.floor(Math.random() * digits.length));
  const patterns = [
    randLetter1 + randLetter2 + randDigit1 + randDigit2,
    randDigit1 + randDigit2 + randLetter1 + randLetter2,
    randLetter1 + randDigit1 + randDigit2 + randLetter2,
    randDigit1 + randLetter1 + randDigit2 + randLetter2
  ];
  return patterns[Math.floor(Math.random() * patterns.length)];
}

function generateSerialKey() {
  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const digits = '0123456789';
  let numericPart = '';
  let letterPart = '';
  for (let i = 0; i < 4; i++) {
    numericPart += digits.charAt(Math.floor(Math.random() * digits.length));
  }
  for (let i = 0; i < 2; i++) {
    letterPart += letters.charAt(Math.floor(Math.random() * letters.length));
  }
  return numericPart + letterPart;
}

// ==============================
// 1Ô∏è‚É£ FOLLOW EVENT
// ==============================
const handleFollow = async (event) => {
  const userId = event.source.userId;
  const timestamp = new Date().toISOString();
  const refCode = generateRefCode();
  const serialKey = generateSerialKey();

  const sessionPayload = {
    line_user_id: userId,
    ref_code: refCode,
    serial_key: serialKey,
    status: 'PENDING',
    created_at: timestamp,
    line_status: 'follow' // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
  };

  const machinePayload = {
    line_user_id: userId,
    line_status: 'follow' // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
  };

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á auth_sessions
  const { error: sessionError } = await supabase
    .from('auth_sessions')
    .upsert(sessionPayload);

  if (sessionError) {
    log.error('[FOLLOW] ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å auth_sessions ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', sessionError);
    return;
  }

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á registered_machines
  const { error: machineError } = await supabase
    .from('registered_machines')
    .update(machinePayload)
    .eq('line_user_id', userId);

  if (machineError) {
    log.warn('[FOLLOW] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï line_status ‡πÉ‡∏ô registered_machines ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', machineError);
  } else {
    log.info(`[FOLLOW] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï line_status = 'follow' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô registered_machines ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${userId}`);
  }

  // ‚úÖ Log ‡∏™‡∏ß‡∏¢ ‡πÜ
  log.info('[FOLLOW] ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° ADTLine-Bot ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô');
  log.info(`LINE USER ID: ${userId}`);
  log.info(`üîê Ref.Code: ${refCode}`);
  log.info(`üîë Serial Key: ${serialKey}`);
  log.success('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Supabase ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
};


// ==============================
// 2Ô∏è‚É£ MESSAGE EVENT
// ==============================
const handleMessage = async (event) => {
  const userId = event.source.userId;
  const msg = event.message;

  if (msg.type !== 'text') return;

  const text = msg.text.trim().toLowerCase();

  if (text === 'req_refcode') {
    log.info(`‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${userId} ‡∏Ç‡∏≠ [REQ_REFCODE]`);

    const { data, error } = await supabase
      .from('auth_sessions')
      .select('ref_code')
      .eq('line_user_id', userId)
      .single();

    if (error || !data || !data.ref_code) {
      log.warn(`[REQ_REFCODE] ‡πÑ‡∏°‡πà‡∏û‡∏ö Ref.Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${userId}`);
      await client.replyMessage(event.replyToken, {
        type: 'text',
        text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Ref.Code ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô QR ‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö'
      });
      return;
    }

    log.info(`üîê Ref.Code: ${data.ref_code}`);
    log.success('‡∏™‡πà‡∏á Ref.Code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    await client.replyMessage(event.replyToken, {
      type: 'text',
      text: `üîê Ref.Code ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: ${data.ref_code}`
    });
  }
};

// ==============================
// 3Ô∏è‚É£ Unfollow ADTLine-Bot
// ==============================
const handleUnfollow = async (event) => {
  const userId = event.source.userId;
  const updates = { line_status: 'unfollow' };

  log.warn(`üëã ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡πÄ‡∏•‡∏¥‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° ADTLine-Bot ‡πÅ‡∏•‡πâ‡∏ß`);

  const { error: authError } = await supabase
    .from('auth_sessions')
    .update(updates)
    .eq('line_user_id', userId);

  if (authError) {
    log.error(`‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï line_status (auth_sessions) ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${authError.message}`);
  } else {
    log.info(`‚úÖ auth_sessions ‚Üí line_status = 'unfollow' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
  }

  const { error: regError } = await supabase
    .from('registered_machines')
    .update(updates)
    .eq('line_user_id', userId);

  if (regError) {
    log.error(`‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï line_status (registered_machines) ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${regError.message}`);
  } else {
    log.info(`‚úÖ registered_machines ‚Üí line_status = 'unfollow' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
  }
};



// ==============================
// 3Ô∏è‚É£ SEND SERIAL KEY AFTER REF.CODE VERIFIED
// ==============================

async function sendLineMessage(lineUserId, serialKey, refCode) {
  try {
    const message = `üîê ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ref.Code: ${refCode}\n‚û°Ô∏è Serial Key ‡∏Ñ‡∏∑‡∏≠   ${serialKey}`;
    await client.pushMessage(lineUserId, {
      type: 'text',
      text: message
    });
    log.info(`‚úÖ ‡∏™‡πà‡∏á Serial Key ‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE User ID: ${lineUserId}`);
  } catch (error) {
    log.error(`‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ LINE ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${error.message}`);
    throw error;
  }
}

// ==============================
// WEBHOOK ROUTE
// ==============================
router.post('/', async (req, res) => {
  const events = req.body.events;

  if (!events || events.length === 0) {
    return res.status(200).end();
  }

  for (const event of events) {
    if (event.type === 'follow') {
      await handleFollow(event);
    } else if (event.type === 'message') {
      await handleMessage(event);
    }
  }

  res.status(200).end();
});


module.exports = {
  router,
  sendLineMessage
};
