// routes/events/eventLine.js
const { supabase } = require('../../utils/supabaseClient');
const line = require('@line/bot-sdk');
const config = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET
};
const client = new line.Client(config);

// ==============================
// 1Ô∏è‚É£ FOLLOW EVENT
// ==============================
const handleFollow = async (event) => {
  const userId = event.source.userId;
  const timestamp = new Date().toISOString();

  await supabase.from('auth_sessions').upsert({
    line_user_id: lineUserId,
    ref_code: refCode,
    serial_key: serialKey,
    status: 'PENDING',
    created_at: timestamp
  });

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  await supabase.from('auth_sessions').upsert({
    line_user_id: userId,
    status: 'NEW',
    created_at: timestamp
  });

  console.log(`[FOLLOW] ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà: ${userId}`);
};

// ==============================
// 2Ô∏è‚É£ UNFOLLOW EVENT
// ==============================
const handleUnfollow = async (event) => {
  const userId = event.source.userId;

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  await supabase.from('auth_sessions')
    .update({
      status: 'BLOCKED',
      unfollowed_at: new Date().toISOString()
    })
    .eq('line_user_id', userId);

  console.log(`[UNFOLLOW] ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ö‡∏≠‡∏ó: ${userId}`);
};

// ==============================
// 3Ô∏è‚É£ MESSAGE EVENT
// ==============================
const handleMessage = async (event) => {
  const userId = event.source.userId;
  const msg = event.message;

  // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  if (msg.type !== 'text') {
    await client.replyMessage(event.replyToken, {
      type: 'text',
      text: 'üìõ ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö'
    });
    return;
  }

  const text = msg.text.trim().toLowerCase();

  switch (text) {
    case 'req_refcode':
      // ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô handler ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
      await client.replyMessage(event.replyToken, {
        type: 'text',
        text: 'üîê ‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å Ref.Code ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á Excel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö'
      });
      break;

    /*case '‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≤‡∏ô':
      await client.replyMessage(event.replyToken, {
        type: 'text',
        text: 'üìê ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≤‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô: https://adtspreadsheet.com/beam-template'
      });
      break;

    case '‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠':
      await client.replyMessage(event.replyToken, {
        type: 'text',
        text: 'üìò ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: https://adtspreadsheet.com/manual'
      });
      break;*/

    default:
      await client.replyMessage(event.replyToken, {
        type: 'text',
        text: '‚ùì ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏±‡∏ö'
      });
      break;
  }

  console.log(`[MESSAGE] ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId}: ${text}`);
};

// ==============================
module.exports = {
  handleFollow,
  handleUnfollow,
  handleMessage
};
