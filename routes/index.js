const express = require('express');
const router = express.Router();
const axios = require('axios');
const db = require('../database');
const { generateRefCode, generateSerialKey, calculateExpiryTime } = require('../utils/helpers');

const LINE_TOKEN = process.env.LINE_BOT1_ACCESS_TOKEN;

router.post('/webhook', async (req, res) => {
  const events = req.body.events;

  if (!events || events.length === 0) {
    console.log('‚ùå No events received');
    return res.status(200).end();
  }

  for (const event of events) {
    const replyToken = event.replyToken;
    const userId = event.source.userId;
    const messageText = event.message?.text;

    console.log(`‚úÖ Received from ${userId}: ${messageText}`);

    if (messageText === 'REQ_REFCODE') {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Ref.Code ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
      const existingSession = await db.findActiveSessionByUser(userId, 'PENDING');

      if (existingSession) {
        return await replyText(replyToken, `üìå ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ Ref.Code ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏∑‡∏≠: ${existingSession.ref_code}`);
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Ref.Code ‡πÅ‡∏•‡∏∞ Serial Key ‡πÉ‡∏´‡∏°‡πà
      const refCode = generateRefCode();
      const serialKey = generateSerialKey();
      const expiresAt = calculateExpiryTime(15); // ‡∏ô‡∏≤‡∏ó‡∏µ

      const sessionData = {
        line_user_id: userId,
        ref_code: refCode,
        serial_key: serialKey,
        status: 'PENDING',
        request_count: 1,
        verify_count: 0,
        day_created_at: new Date().toISOString().split('T')[0],
        time_created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        verify_at: new Date().toISOString(),
        expires_at: expiresAt
      };

      const { data, error } = await db.createSession(sessionData);

      if (error) {
        console.error('‚ùå Failed to create session:', error);
        return await replyText(replyToken, '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á');
      }

      return await replyText(replyToken, `‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Ref.Code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!
‡∏£‡∏´‡∏±‡∏™‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: ${refCode}
‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ô Excel VBA ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Verify ‡∏Ñ‡∏£‡∏±‡∏ö ‚úÖ`);
    } else {
      await replyText(replyToken, `‡∏Ñ‡∏∏‡∏ì‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤: ${messageText}`);
    }
  }

  res.status(200).send('OK');
});

async function replyText(replyToken, text) {
  try {
    await axios.post(
      'https://api.line.me/v2/bot/message/reply',
      {
        replyToken,
        messages: [{ type: 'text', text }]
      },
      {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${LINE_TOKEN}`
        }
      }
    );
  } catch (err) {
    console.error('‚ùå Error replying to LINE:', err.response?.data || err.message);
  }
}

module.exports = router;
