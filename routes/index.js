const express = require('express');
const router = express.Router();
const axios = require('axios');
const db = require('../database');
const { generateRefCode, generateSerialKey, calculateExpiryTime } = require('../utils/helpers');
const LINE_TOKEN = process.env.LINE_BOT1_ACCESS_TOKEN;

// ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
router.get('/', (req, res) => {
  res.send('LINE Bot API is running!');
});

router.post('/webhook', async (req, res) => {
  console.log('üì© Webhook request received:', JSON.stringify(req.body).substring(0, 200) + '...');
  
  const events = req.body.events;
  if (!events || events.length === 0) {
    console.log('‚ùå No events received');
    return res.status(200).end();
  }
  
  for (const event of events) {
    const replyToken = event.replyToken;
    const userId = event.source.userId;
    const messageType = event.message?.type;
    const messageText = event.message?.text;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ replyToken ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!replyToken || replyToken === '00000000000000000000000000000000') {
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ replyToken ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö webhook verification');
      continue; // ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    }
    
    console.log(`‚úÖ Received from ${userId}: ${messageText}`);
    console.log(`üìä Event type: ${event.type}, Message type: ${messageType}`);
    
    if (messageText === 'REQ_REFCODE') {
      console.log('üîç Processing REQ_REFCODE command');
      
      try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Ref.Code ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        console.log(`üîç Checking active sessions for user: ${userId}`);
        const existingSession = await db.findActiveSessionByUser(userId, 'PENDING');
        
        if (existingSession) {
          console.log(`üìå Found existing session: ${JSON.stringify(existingSession)}`);
          await replyText(replyToken, `üìå ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ Ref.Code ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏∑‡∏≠: ${existingSession.ref_code}`);
          continue;
        }
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Ref.Code ‡πÅ‡∏•‡∏∞ Serial Key ‡πÉ‡∏´‡∏°‡πà
        const refCode = generateRefCode();
        const serialKey = generateSerialKey();
        const expiresAt = calculateExpiryTime(15); // ‡∏ô‡∏≤‡∏ó‡∏µ
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const now = new Date();
        const currentDate = now.toISOString().split('T')[0]; // YYYY-MM-DD
        const currentTime = now.toTimeString().split(' ')[0] + '+07'; // HH:MM:SS+07
        
        const sessionData = {
          line_user_id: userId,
          ref_code: refCode,
          serial_key: serialKey,
          status: 'PENDING',
          request_count: 1,
          verify_count: 0,
          day_created_at: currentDate,
          time_created_at: currentTime,
          updated_at: currentTime,
          verify_at: currentTime,
          expires_at: expiresAt
        };
        
        console.log('üìã Creating session with data:', JSON.stringify(sessionData));
        
        const { data, error } = await db.createSession(sessionData);
        
        if (error) {
          console.error('‚ùå Failed to create session:', error);
          await replyText(replyToken, '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á');
          continue;
        }
        
        console.log('‚úÖ Session created successfully:', data);
        
        await replyText(replyToken, `‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Ref.Code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!
‡∏£‡∏´‡∏±‡∏™‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: ${refCode}
‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ô Excel VBA ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Verify ‡∏Ñ‡∏£‡∏±‡∏ö ‚úÖ`);
      } catch (err) {
        console.error('‚ùå Error processing REQ_REFCODE:', err);
        await replyText(replyToken, '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á');
      }
    } else if (messageText === 'PING') {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
      await replyText(replyToken, 'PONG! ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥');
    } else {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ
      await replyText(replyToken, `‡∏Ñ‡∏∏‡∏ì‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤: ${messageText}`);
    }
  }
  
  res.status(200).send('OK');
});

async function replyText(replyToken, text) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö replyToken ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
    if (!replyToken || replyToken === '00000000000000000000000000000000') {
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ: replyToken ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return false;
    }
    
    console.log('üì§ Sending reply with text:', text);
    
    const response = await axios.post(
      'https://api.line.me/v2/bot/message/reply',
      {
        replyToken,
        messages: [{ type: 'text', text }]
      },
      {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${LINE_TOKEN}`
        }
      }
    );
    
    console.log('‚úÖ Reply sent successfully:', response.status);
    return true;
  } catch (err) {
    console.error('‚ùå Error replying to LINE:', err.response?.data || err.message);
    
    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• error log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
    if (err.response) {
      console.error('‚ùå Status:', err.response.status);
      console.error('‚ùå Data:', JSON.stringify(err.response.data));
    }
    
    return false;
  }
}

module.exports = router;
