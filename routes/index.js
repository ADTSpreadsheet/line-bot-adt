const express = require('express');
const router = express.Router();
const axios = require('axios');
const db = require('../database');
const { generateRefCode, generateSerialKey, calculateExpiryTime } = require('../utils/helpers');
const LINE_TOKEN = process.env.LINE_BOT1_ACCESS_TOKEN;

// ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
router.get('/', (req, res) => {
  res.send('LINE Bot API is running!');
});

router.post('/webhook', async (req, res) => {
  console.log('üì© Webhook request received:', JSON.stringify(req.body).substring(0, 200) + '...');
  
  const events = req.body.events;
  if (!events || events.length === 0) {
    console.log('‚ùå No events received');
    return res.status(200).end();
  }
  
  for (const event of events) {
    const replyToken = event.replyToken;
    const userId = event.source.userId;
    const messageType = event.message?.type;
    const messageText = event.message?.text;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ replyToken ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!replyToken || replyToken === '00000000000000000000000000000000') {
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ replyToken ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö webhook verification');
      continue; // ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    }
    
    console.log(`‚úÖ Received from ${userId}: ${messageText}`);
    console.log(`üìä Event type: ${event.type}, Message type: ${messageType}`);
    
    if (messageText === 'REQ_REFCODE') {
      console.log('üîç Processing REQ_REFCODE command');
      
      try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Ref.Code ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        console.log(`üîç Checking active sessions for user: ${userId}`);
        const existingSession = await db.findActiveSessionByUser(userId, 'PENDING');
        
        if (existingSession) {
          console.log(`üìå Found existing session: ${JSON.stringify(existingSession)}`);
          await replyText(replyToken, `üìå ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ Ref.Code ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏∑‡∏≠: ${existingSession.ref_code}`, userId);
          continue;
        }
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Ref.Code ‡πÅ‡∏•‡∏∞ Serial Key ‡πÉ‡∏´‡∏°‡πà
        const refCode = generateRefCode();
        const serialKey = generateSerialKey();
        const expiresAt = calculateExpiryTime(15); // ‡∏ô‡∏≤‡∏ó‡∏µ
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const now = new Date();
        const currentDate = now.toISOString().split('T')[0]; // YYYY-MM-DD
        const currentTime = now.toTimeString().split(' ')[0] + '+07'; // HH:MM:SS+07
        
        const sessionData = {
          line_user_id: userId,
          ref_code: refCode,
          serial_key: serialKey,
          status: 'PENDING',
          request_count: 1,
          verify_count: 0,
          day_created_at: currentDate,
          time_created_at: currentTime,
          updated_at: currentTime,
          verify_at: currentTime,
          expires_at: expiresAt,
          failed_attempts: 0
        };
        
        console.log('üìã Creating session with data:', JSON.stringify(sessionData));
        
        const { data, error } = await db.createSession(sessionData);
        
        if (error) {
          console.error('‚ùå Failed to create session:', error);
          await replyText(replyToken, '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á', userId);
          continue;
        }
        
        console.log('‚úÖ Session created successfully:', data);
        
        await replyText(replyToken, `‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Ref.Code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!
‡∏£‡∏´‡∏±‡∏™‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: ${refCode}
‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ô Excel VBA ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Verify ‡∏Ñ‡∏£‡∏±‡∏ö ‚úÖ`, userId);
      } catch (err) {
        console.error('‚ùå Error processing REQ_REFCODE:', err);
        await replyText(replyToken, '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á', userId);
      }
    } else if (messageText === 'PING') {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
      await replyText(replyToken, 'PONG! ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥', userId);
    } else {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ
      await replyText(replyToken, `‡∏Ñ‡∏∏‡∏ì‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤: ${messageText}`, userId);
    }
  }
  
  res.status(200).send('OK');
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö VBA: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Ref.Code
router.get('/verify/:refCode', async (req, res) => {
  const { refCode } = req.params;
  
  console.log(`üîç Verifying ref_code: ${refCode}`);
  
  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ session ‡∏î‡πâ‡∏ß‡∏¢ ref_code
    const session = await db.findSessionByRefCode(refCode);
    
    if (!session) {
      console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö ref_code: ${refCode}`);
      return res.status(404).json({
        success: false,
        message: 'Ref.Code ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const today = new Date().toISOString().split('T')[0];
    const now = new Date().toTimeString().split(' ')[0] + '+07';
    
    if (session.day_created_at !== today || session.expires_at < now) {
      console.log(`‚ùå ref_code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß: ${refCode}`);
      return res.status(400).json({
        success: false,
        message: 'Ref.Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß'
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 'PENDING' ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (session.status !== 'PENDING') {
      console.log(`‚ùå ref_code ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß: ${refCode}`);
      return res.status(400).json({
        success: false,
        message: 'Ref.Code ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß'
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (session.failed_attempts !== null && session.failed_attempts >= 3) {
      console.log(`‚ùå ref_code ‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Ñ‡πÅ‡∏•‡πâ‡∏ß: ${refCode}`);
      return res.status(403).json({
        success: false,
        message: 'Ref.Code ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
    }
    
    console.log(`‚úÖ ref_code ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${refCode}, lineId: ${session.line_user_id}`);
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô 'VERIFIED'
    await db.updateSessionByRefCode(refCode, {
      status: 'VERIFIED',
      verify_count: session.verify_count + 1,
      verify_at: now,
      updated_at: now
    });
    
    // ‡∏™‡πà‡∏á Serial Key ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ LINE
    await pushText(session.line_user_id, `‚úÖ ‡∏£‡∏´‡∏±‡∏™ Serial Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: ${session.serial_key}
‡πÇ‡∏õ‡∏£‡∏î‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ Excel ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ`);
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    return res.json({
      success: true,
      message: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Ref.Code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á Serial Key ‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß'
    });
  } catch (err) {
    console.error('‚ùå Error verifying ref_code:', err);
    return res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
    });
  }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Serial Key
router.post('/verify-serial-key', async (req, res) => {
  const { refCode, serialKey } = req.body;
  console.log('üì© Verify Serial Key request received:', JSON.stringify(req.body));
  
  if (!refCode || !serialKey) {
    return res.status(400).json({
      success: false,
      message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô'
    });
  }
  
  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ session ‡∏î‡πâ‡∏ß‡∏¢ ref_code
    const session = await db.findSessionByRefCode(refCode);
    
    if (!session) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Ref.Code'
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (session.failed_attempts !== null && session.failed_attempts >= 3) {
      return res.status(403).json({
        success: false,
        message: 'Ref.Code ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const today = new Date().toISOString().split('T')[0];
    const now = new Date().toTimeString().split(' ')[0] + '+07';
    
    if (session.day_created_at !== today || session.expires_at < now) {
      return res.status(400).json({
        success: false,
        message: 'Ref.Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß'
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 'VERIFIED' ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (session.status !== 'VERIFIED') {
      return res.status(400).json({
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Ref.Code ‡∏Å‡πà‡∏≠‡∏ô'
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Serial Key ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (session.serial_key !== serialKey) {
      // Serial Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°
      const failedAttempts = (session.failed_attempts === null ? 0 : session.failed_attempts) + 1;
      
      const updateData = {
        failed_attempts: failedAttempts,
        updated_at: now
      };
      
      // ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÉ‡∏´‡πâ‡∏•‡πá‡∏≠‡∏Ñ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
      if (failedAttempts >= 3) {
        updateData.status = 'BLOCKED';
        
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ LINE
        await pushText(session.line_user_id, `‚ö†Ô∏è ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ Ref.Code ${refCode} ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏£‡∏≠‡∏Å Serial Key ‡∏ú‡∏¥‡∏î 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß`);
      }
      
      await db.updateSessionByRefCode(refCode, updateData);
      
      return res.status(400).json({
        success: false,
        message: 'Serial Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        failedAttempts: failedAttempts,
        isBlocked: failedAttempts >= 3
      });
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô 'ACTIVATED'
    await db.updateSessionByRefCode(refCode, {
      status: 'ACTIVATED',
      updated_at: now
    });
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ LINE
    await pushText(session.line_user_id, `‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ADTSpreadsheet ‡πÑ‡∏î‡πâ 7 ‡∏ß‡∏±‡∏ô ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£`);
    
    return res.json({
      success: true,
      message: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Serial Key ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    });
  } catch (err) {
    console.error('‚ùå Error verifying serial key:', err);
    return res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
    });
  }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
router.post('/log-failed-attempt', async (req, res) => {
  const { refCode, attemptedKey } = req.body;
  console.log('üì© Log failed attempt request received:', JSON.stringify(req.body));
  
  if (!refCode) {
    return res.status(400).json({
      success: false,
      message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô'
    });
  }
  
  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ session ‡∏î‡πâ‡∏ß‡∏¢ ref_code
    const session = await db.findSessionByRefCode(refCode);
    
    if (!session) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Ref.Code'
      });
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°
    const failedAttempts = (session.failed_attempts === null ? 0 : session.failed_attempts) + 1;
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°
    const now = new Date().toTimeString().split(' ')[0] + '+07';
    let updateData = {
      failed_attempts: failedAttempts,
      updated_at: now
    };
    
    // ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÉ‡∏´‡πâ‡∏•‡πá‡∏≠‡∏Ñ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
    if (failedAttempts >= 3) {
      updateData.status = 'BLOCKED';
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ LINE
      const userId = session.line_user_id;
      if (userId) {
        await pushText(userId, `‚ö†Ô∏è ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ Ref.Code ${refCode} ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏£‡∏≠‡∏Å Serial Key ‡∏ú‡∏¥‡∏î 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß`);
      }
    }
    
    await db.updateSessionByRefCode(refCode, updateData);
    
    return res.json({
      success: true,
      message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
      failedAttempts: failedAttempts,
      isBlocked: failedAttempts >= 3
    });
  } catch (err) {
    console.error('‚ùå Error logging failed attempt:', err);
    return res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
    });
  }
});

/**
 * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE
 * @param {string} replyToken - Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
 * @param {string} text - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
 * @param {string} userId - ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Push API ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ)
 * @returns {Promise<boolean>} - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
 */
async function replyText(replyToken, text, userId) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö replyToken ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
    if (!replyToken || replyToken === '00000000000000000000000000000000') {
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ Reply API: replyToken ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ userId ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Push API ‡πÅ‡∏ó‡∏ô
      if (userId) {
        return await pushText(userId, text);
      }
      return false;
    }
    
    console.log('üì§ Sending reply with text:', text);
    
    const response = await axios.post(
      'https://api.line.me/v2/bot/message/reply',
      {
        replyToken,
        messages: [{ type: 'text', text }]
      },
      {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${LINE_TOKEN}`
        }
      }
    );
    
    console.log('‚úÖ Reply sent successfully:', response.status);
    return true;
  } catch (err) {
    console.error('‚ùå Error replying to LINE:', err.response?.data || err.message);
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Invalid reply token ‡πÅ‡∏•‡∏∞‡∏°‡∏µ userId ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Push API ‡πÅ‡∏ó‡∏ô
    if (err.response?.data?.message === 'Invalid reply token' && userId) {
      console.log('üîÑ Falling back to Push API');
      return await pushText(userId, text);
    }
    
    if (err.response) {
      console.error('‚ùå Status:', err.response.status);
      console.error('‚ùå Data:', JSON.stringify(err.response.data));
    }
    
    return false;
  }
}

/**
 * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö push ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ LINE
 * @param {string} userId - ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @param {string} text - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
 * @returns {Promise<boolean>} - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
 */
async function pushText(userId, text) {
  try {
    console.log('üì§ Sending push message to', userId);
    
    const response = await axios.post(
      'https://api.line.me/v2/bot/message/push',
      {
        to: userId,
        messages: [{ type: 'text', text }]
      },
      {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${LINE_TOKEN}`
        }
      }
    );
    
    console.log('‚úÖ Push sent successfully:', response.status);
    return true;
  } catch (err) {
    console.error('‚ùå Error pushing to LINE:', err.response?.data || err.message);
    if (err.response) {
      console.error('‚ùå Push API error status:', err.response.status);
      console.error('‚ùå Push API error data:', JSON.stringify(err.response.data));
    }
    return false;
  }
}

module.exports = router;
