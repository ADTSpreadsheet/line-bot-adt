// routes/linewebhook.js
const express = require('express');
const router = express.Router();
const line = require('@line/bot-sdk');
const { supabase } = require('../utils/supabaseClient');
const { validateLineWebhook, bypassValidation } = require('../middlewares/lineWebhookValidator');

// LINE config
const config = {
  channelSecret: process.env.LINE_CHANNEL_SECRET,
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN
};

const client = new line.Client({
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN
});

// ‡∏™‡∏∏‡πà‡∏° Ref.Code (4 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà+‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
function generateRefCode(length = 4) {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = '';
  for (let i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á serial_key
function generateSerialKey() {
  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á serial key
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = '';
  for (let i = 0; i < 16; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
    if (i === 3 || i === 7 || i === 11) result += '-';
  }
  return result;
}

// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Serial Key ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
async function sendSerialKey(lineUserId, refCode) {
  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ serial key ‡∏à‡∏≤‡∏Å ref_code
    const { data, error } = await supabase
      .from('auth_sessions')
      .select('serial_key')
      .eq('ref_code', refCode)
      .eq('line_user_id', lineUserId);
      
    if (error || !data || data.length === 0) {
      console.error('‚ùå Error finding serial key:', error || 'No data found');
      return false;
    }
    
    // ‡∏™‡πà‡∏á serial key ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏•‡∏ô‡πå
    await client.pushMessage(lineUserId, {
      type: 'text',
      text: `üîë Serial Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: ${data[0].serial_key}`
    });
    
    return true;
  } catch (error) {
    console.error('‚ùå Error sending serial key:', error);
    return false;
  }
}

// Webhook endpoint - ‡πÉ‡∏ä‡πâ middleware ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÄ‡∏≠‡∏á (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà line.middleware)
router.post('/webhook', validateLineWebhook(process.env.LINE_CHANNEL_SECRET), async (req, res) => {
  try {
    // ‡∏™‡πà‡∏á response ‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ LINE platform ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö webhook ‡πÅ‡∏•‡πâ‡∏ß
    res.status(200).end();
    
    const events = req.body.events;
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ events ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠
    if (!events || events.length === 0) {
      return;
    }
    
    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• events
    for (const event of events) {
      // ‚úÖ 1. ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó (follow)
      if (event.type === 'follow') {
        try {
          const lineUserId = event.source.userId;
          const refCode = generateRefCode();
          const serialKey = generateSerialKey();
          
          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Ref.Code ‡πÅ‡∏•‡∏∞ Serial Key ‡∏•‡∏á‡πÉ‡∏ô Supabase (‡∏ï‡∏≤‡∏£‡∏≤‡∏á auth_sessions)
          const { data, error } = await supabase
            .from('auth_sessions')
            .upsert({ 
              line_user_id: lineUserId, 
              ref_code: refCode,
              serial_key: serialKey,
              status: 'PENDING',
              created_at: new Date().toISOString()
            });
            
          if (error) {
            console.error('‚ùå Supabase Error:', error.message);
            throw error;
          }
          
          console.log('üÜï ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó');
          console.log('üì© LINE USER ID:', lineUserId);
          console.log('üîê REF.CODE ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô Supabase:', refCode);
          console.log('üîë SERIAL KEY ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß:', serialKey);
          
          await client.replyMessage(event.replyToken, {
            type: 'text',
            text: `üëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå REQ_REFCODE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™ Ref.Code ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢`
          });
        } catch (error) {
          console.error('‚ùå Error handling follow event:', error);
        }
      }
      
      // ‚úÖ 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      else if (event.type === 'message' && event.message.type === 'text') {
        const userMessage = event.message.text.trim();
        const lineUserId = event.source.userId;
        
        if (userMessage === 'REQ_REFCODE') {
          try {
            // ‡∏î‡∏∂‡∏á Ref.Code ‡∏à‡∏≤‡∏Å Supabase
            const { data, error } = await supabase
              .from('auth_sessions')
              .select('ref_code')
              .eq('line_user_id', lineUserId);
              
            if (error) {
              console.error('‚ùå Supabase Error:', error.message);
              throw error;
            }
            
            if (!data || data.length === 0) {
              await client.replyMessage(event.replyToken, {
                type: 'text',
                text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™ Ref.Code ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô QR ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏£‡∏±‡∏ö'
              });
            } else {
              console.log('üì© LINE USER ID:', lineUserId);
              console.log('üîê ‡∏™‡πà‡∏á REF.CODE:', data[0].ref_code);
              await client.replyMessage(event.replyToken, {
                type: 'text',
                text: `üîê Ref.Code ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: ${data[0].ref_code}`
              });
            }
          } catch (error) {
            console.error('‚ùå Error handling REQ_REFCODE message:', error);
            
            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            try {
              await client.replyMessage(event.replyToken, {
                type: 'text',
                text: '‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á'
              });
            } catch (replyError) {
              console.error('‚ùå Error sending error message:', replyError);
            }
          }
        }
      }
    }
  } catch (error) {
    console.error('‚ùå Webhook Error:', error);
    // response ‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏≠‡∏µ‡∏Å
  }
});

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Ref Code
router.post('/verify-refcode', async (req, res) => {
  try {
    const { refCode, lineUserId } = req.body;
    
    if (!refCode || !lineUserId) {
      return res.status(400).json({ 
        success: false, 
        message: 'Missing required fields' 
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ref_code ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö lineUserId ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const { data, error } = await supabase
      .from('auth_sessions')
      .select('id')
      .eq('ref_code', refCode)
      .eq('line_user_id', lineUserId);
      
    if (error) {
      console.error('‚ùå Error verifying ref code:', error);
      return res.status(500).json({ 
        success: false, 
        message: 'Database error' 
      });
    }
    
    if (!data || data.length === 0) {
      return res.status(404).json({ 
        success: false, 
        message: 'Invalid ref code or LINE user ID' 
      });
    }
    
    // ‡∏™‡πà‡∏á serial key ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏•‡∏ô‡πå
    const sent = await sendSerialKey(lineUserId, refCode);
    
    if (!sent) {
      return res.status(500).json({ 
        success: false, 
        message: 'Failed to send serial key' 
      });
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    await supabase
      .from('auth_sessions')
      .update({ status: 'REFCODE_VERIFIED' })
      .eq('ref_code', refCode)
      .eq('line_user_id', lineUserId);
    
    return res.status(200).json({ 
      success: true, 
      message: 'Ref code verified and serial key sent' 
    });
  } catch (error) {
    console.error('‚ùå Error in verify-refcode endpoint:', error);
    return res.status(500).json({ 
      success: false, 
      message: 'Server error' 
    });
  }
});

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Serial Key
router.post('/verify-serialkey', async (req, res) => {
  try {
    const { refCode, serialKey } = req.body;
    
    if (!refCode || !serialKey) {
      return res.status(400).json({ 
        success: false, 
        message: 'Missing required fields' 
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ serial_key ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö ref_code ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const { data, error } = await supabase
      .from('auth_sessions')
      .select('line_user_id')
      .eq('ref_code', refCode)
      .eq('serial_key', serialKey);
      
    if (error) {
      console.error('‚ùå Error verifying serial key:', error);
      return res.status(500).json({ 
        success: false, 
        message: 'Database error' 
      });
    }
    
    if (!data || data.length === 0) {
      return res.status(404).json({ 
        success: false, 
        message: 'Invalid serial key or ref code' 
      });
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    await supabase
      .from('auth_sessions')
      .update({ 
        status: 'VERIFIED',
        verified_at: new Date().toISOString()
      })
      .eq('ref_code', refCode)
      .eq('serial_key', serialKey);
    
    return res.status(200).json({ 
      success: true, 
      message: 'Serial key verified successfully',
      lineUserId: data[0].line_user_id
    });
  } catch (error) {
    console.error('‚ùå Error in verify-serialkey endpoint:', error);
    return res.status(500).json({ 
      success: false, 
      message: 'Server error' 
    });
  }
});

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å VBA
router.post('/complete-registration', async (req, res) => {
  try {
    const { refCode, userData } = req.body;
    
    if (!refCode || !userData) {
      return res.status(400).json({ 
        success: false, 
        message: 'Missing required fields' 
      });
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    const { error } = await supabase
      .from('auth_sessions')
      .update({
        ...userData,
        status: 'COMPLETED',
        machine_id: userData.machine_id || 'DEFAULT',
        completed_at: new Date().toISOString()
      })
      .eq('ref_code', refCode);
      
    if (error) {
      console.error('‚ùå Error completing registration:', error);
      return res.status(500).json({ 
        success: false, 
        message: 'Database error' 
      });
    }
    
    return res.status(200).json({ 
      success: true, 
      message: 'Registration completed successfully' 
    });
  } catch (error) {
    console.error('‚ùå Error in complete-registration endpoint:', error);
    return res.status(500).json({ 
      success: false, 
      message: 'Server error' 
    });
  }
});

// Webhook endpoint - ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô Bypass Validation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
router.post('/webhook-test', bypassValidation(), async (req, res) => {
  try {
    res.status(200).end();
    console.log('üìù Test webhook received:', req.body);
  } catch (error) {
    console.error('‚ùå Test webhook error:', error);
  }
});

// Health check endpoint
router.get('/webhook', (req, res) => {
  res.status(200).json({ 
    status: 'ok', 
    message: 'LINE webhook is accessible',
    config: {
      hasChannelSecret: Boolean(process.env.LINE_CHANNEL_SECRET),
      hasAccessToken: Boolean(process.env.LINE_CHANNEL_ACCESS_TOKEN)
    }
  });
});

// Health check endpoint (backward compatibility)
router.get('/health', (req, res) => {
  res.status(200).json({ status: 'ok', message: 'LINE webhook is healthy' });
});

module.exports = router;
