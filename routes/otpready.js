// routes/verifyotp.js
const express = require('express');
const router = express.Router();
const { Client } = require('@line/bot-sdk');

// ‡∏î‡∏∂‡∏á Map ‡∏à‡∏≤‡∏Å otpready ‡∏ñ‡πâ‡∏≤‡πÅ‡∏ä‡∏£‡πå‡∏Å‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ duplicate ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡πá‡πÑ‡∏î‡πâ
const otpStore = new Map(); // key: ref_code, value: { otp, createdAt }

// LINE Client
const lineClient = new Client({
  channelAccessToken: process.env.LINE_BOT1_ACCESS_TOKEN
});

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≤‡∏Å VBA
router.post('/verify-otp', async (req, res) => {
  const { ref_code, otp } = req.body;

  console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP ‡∏à‡∏≤‡∏Å ref_code: ${ref_code}, otp: ${otp}`);

  if (!ref_code || !otp) {
    return res.status(400).json({ success: false, message: 'Missing ref_code or otp' });
  }

  const entry = otpStore.get(ref_code);

  if (!entry) {
    return res.status(404).json({ success: false, message: 'OTP not found or expired' });
  }

  const { otp: storedOtp, createdAt } = entry;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ OTP ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á (5 ‡∏ô‡∏≤‡∏ó‡∏µ)
  const now = new Date();
  const diffMs = now - createdAt;
  const expired = diffMs > 5 * 60 * 1000; // 5 ‡∏ô‡∏≤‡∏ó‡∏µ

  if (expired) {
    otpStore.delete(ref_code);
    return res.status(410).json({ success: false, message: 'OTP expired' });
  }

  if (otp !== storedOtp) {
    return res.status(401).json({ success: false, message: 'Incorrect OTP' });
  }

  // ‚úÖ OTP ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  otpStore.delete(ref_code); // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ

  try {
    // ‡∏î‡∏∂‡∏á line_user_id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE
    const { createClient } = require('@supabase/supabase-js');
    const supabase = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_KEY
    );

    const { data, error } = await supabase
      .from('user_registrations')
      .select('line_user_id')
      .eq('ref_code', ref_code)
      .single();

    if (error || !data || !data.line_user_id) {
      return res.status(404).json({ success: false, message: 'LINE user not found' });
    }

    const message = {
      type: 'text',
      text: `‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö‡∏ô‡∏≤‡∏¢‡∏ä‡πà‡∏≤‡∏á üë∑‚Äç‚ôÇÔ∏è\nüóìÔ∏è ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô 5 ‡∏ß‡∏±‡∏ô\nüöÄ ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏ô‡∏∏‡∏Å‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö!`
    };

    await lineClient.pushMessage(data.line_user_id, message);
    console.log(`‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡πÅ‡∏•‡πâ‡∏ß`);

    return res.status(200).json({ success: true, message: 'OTP verified and user notified' });

  } catch (err) {
    console.error('‚ùå Error verifying OTP:', err);
    return res.status(500).json({ success: false, message: 'Server error' });
  }
});

module.exports = router;
