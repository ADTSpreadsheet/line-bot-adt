const express = require('express');
const router = express.Router();
const { supabase } = require('../utils/supabaseClient');
const { createModuleLogger } = require('../utils/logger');
const log = createModuleLogger('UserForm3');

router.post('/get-message', async (req, res) => {
  const { lineUserId } = req.body;

  log.info('üì• Received request from VBA');
  log.debug('lineUserId:', lineUserId || '[Not Provided]');

  const responseMessage = {
    stage1: '‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1  ‡∏Ñ‡∏∏‡∏ì‡∏û‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Scan QR-CODE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° ADTLine-Bot ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏ß‡πà‡∏≤.. REQ_REFCODE ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ô‡πâ‡∏≠‡∏á ADTLine-Bot ‡πÄ‡∏Ñ‡πâ‡∏≤‡∏à‡∏∞‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™ Ref.Code ‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏û‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏´‡∏±‡∏™ Ref.Code‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏•‡∏á‡πÉ‡∏ô‡∏ä‡∏≠‡∏á Ref.Code ‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏´‡πâ‡∏î‡∏µ ‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö !  ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡∏û‡∏µ‡πà‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Verify Code ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö  ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ô‡πâ‡∏≠‡∏á ADTLine-Bot ‡πÄ‡∏Ñ‡πâ‡∏≤‡∏à‡∏∞‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™ Serial key ‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö
            '‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2  ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ! ‡∏û‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡∏ú‡∏¥‡∏î ‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏£‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡πä‡∏≠‡∏Ñ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö‡∏ú‡∏° ‡πÑ‡∏î‡πâ‡∏£‡∏´‡∏±‡∏™ Serial key ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Confirm ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö',
    stage3: '‡∏£‡∏´‡∏±‡∏™ Serial key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏≠‡∏≤‡∏¢‡∏∏‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤....'
  };

  if (!lineUserId) {
    log.success('üîÅ No Line ID ‚Äî returning stage1 only');
    return res.status(200).json({
      success: true,
      message: {
        stage1: responseMessage.stage1,
        stage2: '',
        stage3: ''
      }
    });
  }

  try {
    const { data, error } = await supabase
      .from('auth_sessions')
      .select('status, ref_code, serial_key, expires_at')
      .eq('line_user_id', lineUserId)
      .single();

    if (error || !data) {
      log.warn('üü° Line ID not found in Supabase');
      return res.status(200).json({
        success: true,
        message: {
          stage1: responseMessage.stage1,
          stage2: '',
          stage3: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå REQ_REFCODE ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
        }
      });
    }

    const { ref_code, serial_key, expires_at } = data;
    const remainingTime = new Date(expires_at) - new Date();

    if (remainingTime <= 0) {
      log.warn('üî¥ Serial Key expired');
      return res.status(200).json({
        success: true,
        message: {
          stage1: responseMessage.stage1,
          stage2: '',
          stage3: '‚ùå ‡∏£‡∏´‡∏±‡∏™ Serial Key ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß'
        }
      });
    }

    const minutes = Math.floor(remainingTime / 60000);
    const seconds = Math.floor((remainingTime % 60000) / 1000);
    const countdownMessage = `‚è≥ ‡∏£‡∏´‡∏±‡∏™ Serial Key ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ ${seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;

    log.success('‚úÖ Serial Key active - responding with full stages');

    return res.status(200).json({
      success: true,
      message: {
        stage1: responseMessage.stage1,
        stage2: responseMessage.stage2,
        stage3: countdownMessage,
        ref_code,
        serial_key
      }
    });
  } catch (err) {
    log.error('‚ùå Exception caught in /get-message:', err);
    return res.status(500).json({ success: false, message: 'Server error occurred.' });
  }
});

module.exports = router;
