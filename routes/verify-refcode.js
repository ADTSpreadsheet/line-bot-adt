// routes/verify-refcode.js
const express = require('express');
const router = express.Router();
const { supabase } = require('../utils/supabaseClient');
const line = require('@line/bot-sdk');
const { createModuleLogger } = require('../utils/logger');
const log = createModuleLogger('ADTLine-Bot');

const config = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET
};
const client = new line.Client(config);

// Verify RefCode
router.post('/', async (req, res) => {
  const { refCode, lineUserId } = req.body;

  if (!refCode || !lineUserId) {
    return res.status(400).json({ 
      success: false, 
      message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Ref.Code ‡πÅ‡∏•‡∏∞ Line User ID ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' 
    });
  }

  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Ref.Code ‡πÅ‡∏•‡∏∞ Serial Key
    const { data, error } = await supabase
      .from('auth_sessions')
      .select('serial_key')
      .eq('ref_code', refCode)
      .single();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    if (error) {
      console.log('Error:', error); // log ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      return res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!data) {
      console.log('No data found for refCode:', refCode);  // log ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      return res.status(404).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ref.Code ‡∏ô‡∏µ‡πâ' });
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Serial Key ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    return res.status(200).json({ success: true, serial_key: data.serial_key });

    // ‡∏™‡πà‡∏á Serial Key ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏•‡∏ô‡πå
    const serialKey = data.serial_key;
    await client.pushMessage(lineUserId, {
      type: 'text',
      text: `üîê Serial Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: ${serialKey}`
    });

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await supabase
      .from('auth_sessions')
      .update({ status: 'REFCODE_VERIFIED' })
      .eq('ref_code', refCode)
      .eq('line_user_id', lineUserId);

    // Log & Response
    log.success(`‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Ref.Code ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: ${refCode}`);
    res.status(200).json({ 
      success: true, 
      message: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Ref.Code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Serial Key ‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß' 
    });

  } catch (err) {
    log.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô /verify-refcode:', err);
    res.status(500).json({ 
      success: false, 
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' 
    });
  }
});


module.exports = router;
