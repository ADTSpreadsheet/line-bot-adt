// üìÅ routes/verifyOTP.js
const express = require('express');
const router = express.Router();
const line = require('@line/bot-sdk');

// ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö OTP ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÅ‡∏ö‡∏ö in-memory
const otpStore = new Map(); // key: ref_code, value: { otp, createdAt }

// ‡∏™‡∏£‡πâ‡∏≤‡∏á OTP ‡πÅ‡∏ö‡∏ö 1 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ + 5 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô "O12568"
function generateOTP() {
  const letter = String.fromCharCode(65 + Math.floor(Math.random() * 26));
  const numbers = Math.floor(10000 + Math.random() * 90000);
  return `${letter}${numbers}`;
}

// ‡∏™‡πà‡∏á OTP ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏≤‡∏á LINE
async function sendOTPToLine(lineUserId, refCode, otp, lineClient) {
  const message = `üîê OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
Ref.Code: ${refCode}
OTP: ${otp}\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ô‡∏≥ OTP ‡πÑ‡∏õ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`;
  await lineClient.pushMessage(lineUserId, {
    type: 'text',
    text: message
  });
}

// ‚úÖ Endpoint ‡∏™‡∏£‡πâ‡∏≤‡∏á OTP ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ LINE
router.post('/generate-otp', async (req, res) => {
  const { ref_code, line_user_id } = req.body;
  const otp = generateOTP();

  otpStore.set(ref_code, {
    otp,
    createdAt: new Date()
  });

  try {
    const lineClient = new line.Client({
      channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN
    });

    await sendOTPToLine(line_user_id, ref_code, otp, lineClient);

    console.log(`‚úÖ OTP Generated for ${ref_code}: ${otp}`);
    return res.status(200).json({ success: true, message: 'OTP sent successfully' });
  } catch (err) {
    console.error('‚ùå Error sending OTP:', err);
    return res.status(500).json({ success: false, message: 'Failed to send OTP' });
  }
});

// ‚úÖ Endpoint ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP
router.post('/verify-otp', (req, res) => {
  const { ref_code, otp } = req.body;
  const record = otpStore.get(ref_code);

  if (!record) {
    return res.status(400).json({ success: false, message: 'No OTP generated for this Ref.Code' });
  }

  if (record.otp === otp) {
    otpStore.delete(ref_code); // ‡∏•‡∏ö OTP ‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß

    console.log(`‚úÖ OTP ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ref.Code: ${ref_code}`);
    return res.status(200).json({ success: true, message: 'OTP verified successfully' });
  } else {
    console.log(`‚ùå OTP ‡∏ú‡∏¥‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ref.Code: ${ref_code}`);
    return res.status(401).json({ success: false, message: 'Invalid OTP' });
  }
});

module.exports = router;
