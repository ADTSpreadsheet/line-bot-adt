// utils/helpers.js - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Ref.Code ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
 * @returns {string} - Ref.Code ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: LETTER-NUMBER-LETTER-NUMBER, ‡πÄ‡∏ä‡πà‡∏ô A1B2)
 */
function generateRefCode() {
  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const numbers = '0123456789';
  
  let code = '';
  
  // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö LETTER-NUMBER-LETTER-NUMBER
  code += letters.charAt(Math.floor(Math.random() * letters.length));
  code += numbers.charAt(Math.floor(Math.random() * numbers.length));
  code += letters.charAt(Math.floor(Math.random() * letters.length));
  code += numbers.charAt(Math.floor(Math.random() * numbers.length));
  
  console.log(`üîë ‡∏™‡∏£‡πâ‡∏≤‡∏á Ref.Code: ${code}`);
  return code;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Serial Key ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
 * @returns {string} - Serial Key ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: XXXX-XXXX-XXXX-XXXX)
 */
function generateSerialKey() {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  
  let key = '';
  for (let i = 0; i < 4; i++) {
    let segment = '';
    for (let j = 0; j < 4; j++) {
      segment += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    key += segment;
    if (i < 3) key += '-';
  }
  
  console.log(`üîë ‡∏™‡∏£‡πâ‡∏≤‡∏á Serial Key: ${key}`);
  return key;
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
 * ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó timetz ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @param {number} minutes - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
 * @returns {string} - ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM:SS+07
 */
function calculateExpiryTime(minutes) {
  const now = new Date();
  const expiry = new Date(now.getTime() + minutes * 60000);
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM:SS+07 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• timetz
  // ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ Time Zone ‡πÄ‡∏õ‡πá‡∏ô Asia/Bangkok (+07)
  const timeOnly = expiry.toTimeString().split(' ')[0] + '+07';
  
  console.log(`‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: ${timeOnly} (${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ)`);
  return timeOnly;
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• timetz
 * @param {string} expiryTime - ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM:SS+07
 * @param {string} currentTime - ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM:SS+07
 * @returns {boolean} - true ‡∏ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß, false ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
 */
function isExpired(expiryTime, currentTime) {
  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
  function timeToMinutes(timeStr) {
    const timePart = timeStr.split('+')[0]; // ‡∏ï‡∏±‡∏î timezone ‡∏≠‡∏≠‡∏Å
    const [hours, minutes, seconds] = timePart.split(':').map(Number);
    return hours * 60 + minutes;
  }
  
  const expiryMinutes = timeToMinutes(expiryTime);
  const currentMinutes = timeToMinutes(currentTime);
  
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏±‡∏ô
  if (expiryMinutes < currentMinutes) {
    return true;
  }
  
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏°‡∏≤‡∏Å (‡πÄ‡∏ä‡πà‡∏ô 23:00 vs 01:00) ‡∏≠‡∏≤‡∏à‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏±‡∏ô
  if (expiryMinutes > currentMinutes + 22 * 60) {
    return true;
  }
  
  return false;
}

module.exports = {
  generateRefCode,
  generateSerialKey,
  calculateExpiryTime,
  isExpired
};
